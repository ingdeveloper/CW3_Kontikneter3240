{"version":3,"sources":["Scripts/signalr/hubs.js","node_modules/toastr/toastr.js","node_modules/q/q.js","node_modules/jsep/build/jsep.js","node_modules/knockout.validation/dist/knockout.validation.js","node_modules/downloadjs/download.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9dhvsxfile":"vendor2.bundle.js","sourcesContent":["/*!\r\n * ASP.NET SignalR JavaScript Library v2.2.1\r\n * http://signalr.net/\r\n *\r\n * Copyright (c) .NET Foundation. All rights reserved.\r\n * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n *\r\n */\r\n\r\n/// <reference path=\"..\\..\\SignalR.Client.JS\\Scripts\\jquery-1.6.4.js\" />\r\n/// <reference path=\"jquery.signalR.js\" />\r\n(function ($, window, undefined) {\r\n    /// <param name=\"$\" type=\"jQuery\" />\r\n    \"use strict\";\r\n\r\n    if (typeof ($.signalR) !== \"function\") {\r\n        throw new Error(\"SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.\");\r\n    }\r\n\r\n    var signalR = $.signalR;\r\n\r\n    function makeProxyCallback(hub, callback) {\r\n        return function () {\r\n            // Call the client hub method\r\n            callback.apply(hub, $.makeArray(arguments));\r\n        };\r\n    }\r\n\r\n    function registerHubProxies(instance, shouldSubscribe) {\r\n        var key, hub, memberKey, memberValue, subscriptionMethod;\r\n\r\n        for (key in instance) {\r\n            if (instance.hasOwnProperty(key)) {\r\n                hub = instance[key];\r\n\r\n                if (!(hub.hubName)) {\r\n                    // Not a client hub\r\n                    continue;\r\n                }\r\n\r\n                if (shouldSubscribe) {\r\n                    // We want to subscribe to the hub events\r\n                    subscriptionMethod = hub.on;\r\n                } else {\r\n                    // We want to unsubscribe from the hub events\r\n                    subscriptionMethod = hub.off;\r\n                }\r\n\r\n                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe\r\n                for (memberKey in hub.client) {\r\n                    if (hub.client.hasOwnProperty(memberKey)) {\r\n                        memberValue = hub.client[memberKey];\r\n\r\n                        if (!$.isFunction(memberValue)) {\r\n                            // Not a client hub function\r\n                            continue;\r\n                        }\r\n\r\n                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    $.hubConnection.prototype.createHubProxies = function () {\r\n        var proxies = {};\r\n        this.starting(function () {\r\n            // Register the hub proxies as subscribed\r\n            // (instance, shouldSubscribe)\r\n            registerHubProxies(proxies, true);\r\n\r\n            this._registerSubscribedHubs();\r\n        }).disconnected(function () {\r\n            // Unsubscribe all hub proxies when we \"disconnect\".  This is to ensure that we do not re-add functional call backs.\r\n            // (instance, shouldSubscribe)\r\n            registerHubProxies(proxies, false);\r\n        });\r\n\r\n        proxies['eventHub'] = this.createHubProxy('eventHub'); \r\n        proxies['eventHub'].client = { };\r\n        proxies['eventHub'].server = {\r\n            subscribe: function () {\r\n                return proxies['eventHub'].invoke.apply(proxies['eventHub'], $.merge([\"Subscribe\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            unsubscribe: function () {\r\n                return proxies['eventHub'].invoke.apply(proxies['eventHub'], $.merge([\"Unsubscribe\"], $.makeArray(arguments)));\r\n             }\r\n        };\r\n\r\n        proxies['historyHub'] = this.createHubProxy('historyHub'); \r\n        proxies['historyHub'].client = { };\r\n        proxies['historyHub'].server = {\r\n            subscribe: function (occurrenceId) {\r\n                return proxies['historyHub'].invoke.apply(proxies['historyHub'], $.merge([\"Subscribe\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            subscribeAll: function (occurrenceIds) {\r\n                return proxies['historyHub'].invoke.apply(proxies['historyHub'], $.merge([\"SubscribeAll\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            unsubscribe: function (occurrenceId) {\r\n                return proxies['historyHub'].invoke.apply(proxies['historyHub'], $.merge([\"Unsubscribe\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            unsubscribeAll: function (occurrenceIds) {\r\n                return proxies['historyHub'].invoke.apply(proxies['historyHub'], $.merge([\"UnsubscribeAll\"], $.makeArray(arguments)));\r\n             }\r\n        };\r\n\r\n        proxies['measurementHub'] = this.createHubProxy('measurementHub'); \r\n        proxies['measurementHub'].client = { };\r\n        proxies['measurementHub'].server = {\r\n            read: function (signalId) {\r\n                return proxies['measurementHub'].invoke.apply(proxies['measurementHub'], $.merge([\"Read\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            subscribe: function (signalId) {\r\n                return proxies['measurementHub'].invoke.apply(proxies['measurementHub'], $.merge([\"Subscribe\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            subscribeAll: function (signalIds) {\r\n                return proxies['measurementHub'].invoke.apply(proxies['measurementHub'], $.merge([\"SubscribeAll\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            unsubscribe: function (signalId) {\r\n                return proxies['measurementHub'].invoke.apply(proxies['measurementHub'], $.merge([\"Unsubscribe\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            unsubscribeAll: function (signalIds) {\r\n                return proxies['measurementHub'].invoke.apply(proxies['measurementHub'], $.merge([\"UnsubscribeAll\"], $.makeArray(arguments)));\r\n             }\r\n        };\r\n\r\n        proxies['messageHub'] = this.createHubProxy('messageHub'); \r\n        proxies['messageHub'].client = { };\r\n        proxies['messageHub'].server = {\r\n            subscribe: function (logLevel) {\r\n                return proxies['messageHub'].invoke.apply(proxies['messageHub'], $.merge([\"Subscribe\"], $.makeArray(arguments)));\r\n             },\r\n\r\n            unsubscribe: function () {\r\n                return proxies['messageHub'].invoke.apply(proxies['messageHub'], $.merge([\"Unsubscribe\"], $.makeArray(arguments)));\r\n             }\r\n        };\r\n\r\n        return proxies;\r\n    };\r\n\r\n    signalR.hub = $.hubConnection(\"/signalr\", { useDefaultPath: false });\r\n    $.extend(signalR, signalR.hub.createHubProxies());\r\n\r\n}(window.jQuery, window));","/*\n * Toastr\n * Copyright 2012-2015\n * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.\n * All Rights Reserved.\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\n *\n * ARIA Support: Greta Krafsig\n *\n * Project: https://github.com/CodeSeven/toastr\n */\n/* global define */\n(function (define) {\n    define(['jquery'], function ($) {\n        return (function () {\n            var $container;\n            var listener;\n            var toastId = 0;\n            var toastType = {\n                error: 'error',\n                info: 'info',\n                success: 'success',\n                warning: 'warning'\n            };\n\n            var toastr = {\n                clear: clear,\n                remove: remove,\n                error: error,\n                getContainer: getContainer,\n                info: info,\n                options: {},\n                subscribe: subscribe,\n                success: success,\n                version: '2.1.4',\n                warning: warning\n            };\n\n            var previousToast;\n\n            return toastr;\n\n            ////////////////\n\n            function error(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.error,\n                    iconClass: getOptions().iconClasses.error,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function getContainer(options, create) {\n                if (!options) { options = getOptions(); }\n                $container = $('#' + options.containerId);\n                if ($container.length) {\n                    return $container;\n                }\n                if (create) {\n                    $container = createContainer(options);\n                }\n                return $container;\n            }\n\n            function info(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.info,\n                    iconClass: getOptions().iconClasses.info,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function subscribe(callback) {\n                listener = callback;\n            }\n\n            function success(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.success,\n                    iconClass: getOptions().iconClasses.success,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function warning(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.warning,\n                    iconClass: getOptions().iconClasses.warning,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function clear($toastElement, clearOptions) {\n                var options = getOptions();\n                if (!$container) { getContainer(options); }\n                if (!clearToast($toastElement, options, clearOptions)) {\n                    clearContainer(options);\n                }\n            }\n\n            function remove($toastElement) {\n                var options = getOptions();\n                if (!$container) { getContainer(options); }\n                if ($toastElement && $(':focus', $toastElement).length === 0) {\n                    removeToast($toastElement);\n                    return;\n                }\n                if ($container.children().length) {\n                    $container.remove();\n                }\n            }\n\n            // internal functions\n\n            function clearContainer (options) {\n                var toastsToClear = $container.children();\n                for (var i = toastsToClear.length - 1; i >= 0; i--) {\n                    clearToast($(toastsToClear[i]), options);\n                }\n            }\n\n            function clearToast ($toastElement, options, clearOptions) {\n                var force = clearOptions && clearOptions.force ? clearOptions.force : false;\n                if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {\n                    $toastElement[options.hideMethod]({\n                        duration: options.hideDuration,\n                        easing: options.hideEasing,\n                        complete: function () { removeToast($toastElement); }\n                    });\n                    return true;\n                }\n                return false;\n            }\n\n            function createContainer(options) {\n                $container = $('<div/>')\n                    .attr('id', options.containerId)\n                    .addClass(options.positionClass);\n\n                $container.appendTo($(options.target));\n                return $container;\n            }\n\n            function getDefaults() {\n                return {\n                    tapToDismiss: true,\n                    toastClass: 'toast',\n                    containerId: 'toast-container',\n                    debug: false,\n\n                    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n                    showDuration: 300,\n                    showEasing: 'swing', //swing and linear are built into jQuery\n                    onShown: undefined,\n                    hideMethod: 'fadeOut',\n                    hideDuration: 1000,\n                    hideEasing: 'swing',\n                    onHidden: undefined,\n                    closeMethod: false,\n                    closeDuration: false,\n                    closeEasing: false,\n                    closeOnHover: true,\n\n                    extendedTimeOut: 1000,\n                    iconClasses: {\n                        error: 'toast-error',\n                        info: 'toast-info',\n                        success: 'toast-success',\n                        warning: 'toast-warning'\n                    },\n                    iconClass: 'toast-info',\n                    positionClass: 'toast-top-right',\n                    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n                    titleClass: 'toast-title',\n                    messageClass: 'toast-message',\n                    escapeHtml: false,\n                    target: 'body',\n                    closeHtml: '<button type=\"button\">&times;</button>',\n                    closeClass: 'toast-close-button',\n                    newestOnTop: true,\n                    preventDuplicates: false,\n                    progressBar: false,\n                    progressClass: 'toast-progress',\n                    rtl: false\n                };\n            }\n\n            function publish(args) {\n                if (!listener) { return; }\n                listener(args);\n            }\n\n            function notify(map) {\n                var options = getOptions();\n                var iconClass = map.iconClass || options.iconClass;\n\n                if (typeof (map.optionsOverride) !== 'undefined') {\n                    options = $.extend(options, map.optionsOverride);\n                    iconClass = map.optionsOverride.iconClass || iconClass;\n                }\n\n                if (shouldExit(options, map)) { return; }\n\n                toastId++;\n\n                $container = getContainer(options, true);\n\n                var intervalId = null;\n                var $toastElement = $('<div/>');\n                var $titleElement = $('<div/>');\n                var $messageElement = $('<div/>');\n                var $progressElement = $('<div/>');\n                var $closeElement = $(options.closeHtml);\n                var progressBar = {\n                    intervalId: null,\n                    hideEta: null,\n                    maxHideTime: null\n                };\n                var response = {\n                    toastId: toastId,\n                    state: 'visible',\n                    startTime: new Date(),\n                    options: options,\n                    map: map\n                };\n\n                personalizeToast();\n\n                displayToast();\n\n                handleEvents();\n\n                publish(response);\n\n                if (options.debug && console) {\n                    console.log(response);\n                }\n\n                return $toastElement;\n\n                function escapeHtml(source) {\n                    if (source == null) {\n                        source = '';\n                    }\n\n                    return source\n                        .replace(/&/g, '&amp;')\n                        .replace(/\"/g, '&quot;')\n                        .replace(/'/g, '&#39;')\n                        .replace(/</g, '&lt;')\n                        .replace(/>/g, '&gt;');\n                }\n\n                function personalizeToast() {\n                    setIcon();\n                    setTitle();\n                    setMessage();\n                    setCloseButton();\n                    setProgressBar();\n                    setRTL();\n                    setSequence();\n                    setAria();\n                }\n\n                function setAria() {\n                    var ariaValue = '';\n                    switch (map.iconClass) {\n                        case 'toast-success':\n                        case 'toast-info':\n                            ariaValue =  'polite';\n                            break;\n                        default:\n                            ariaValue = 'assertive';\n                    }\n                    $toastElement.attr('aria-live', ariaValue);\n                }\n\n                function handleEvents() {\n                    if (options.closeOnHover) {\n                        $toastElement.hover(stickAround, delayedHideToast);\n                    }\n\n                    if (!options.onclick && options.tapToDismiss) {\n                        $toastElement.click(hideToast);\n                    }\n\n                    if (options.closeButton && $closeElement) {\n                        $closeElement.click(function (event) {\n                            if (event.stopPropagation) {\n                                event.stopPropagation();\n                            } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {\n                                event.cancelBubble = true;\n                            }\n\n                            if (options.onCloseClick) {\n                                options.onCloseClick(event);\n                            }\n\n                            hideToast(true);\n                        });\n                    }\n\n                    if (options.onclick) {\n                        $toastElement.click(function (event) {\n                            options.onclick(event);\n                            hideToast();\n                        });\n                    }\n                }\n\n                function displayToast() {\n                    $toastElement.hide();\n\n                    $toastElement[options.showMethod](\n                        {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}\n                    );\n\n                    if (options.timeOut > 0) {\n                        intervalId = setTimeout(hideToast, options.timeOut);\n                        progressBar.maxHideTime = parseFloat(options.timeOut);\n                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                        if (options.progressBar) {\n                            progressBar.intervalId = setInterval(updateProgress, 10);\n                        }\n                    }\n                }\n\n                function setIcon() {\n                    if (map.iconClass) {\n                        $toastElement.addClass(options.toastClass).addClass(iconClass);\n                    }\n                }\n\n                function setSequence() {\n                    if (options.newestOnTop) {\n                        $container.prepend($toastElement);\n                    } else {\n                        $container.append($toastElement);\n                    }\n                }\n\n                function setTitle() {\n                    if (map.title) {\n                        var suffix = map.title;\n                        if (options.escapeHtml) {\n                            suffix = escapeHtml(map.title);\n                        }\n                        $titleElement.append(suffix).addClass(options.titleClass);\n                        $toastElement.append($titleElement);\n                    }\n                }\n\n                function setMessage() {\n                    if (map.message) {\n                        var suffix = map.message;\n                        if (options.escapeHtml) {\n                            suffix = escapeHtml(map.message);\n                        }\n                        $messageElement.append(suffix).addClass(options.messageClass);\n                        $toastElement.append($messageElement);\n                    }\n                }\n\n                function setCloseButton() {\n                    if (options.closeButton) {\n                        $closeElement.addClass(options.closeClass).attr('role', 'button');\n                        $toastElement.prepend($closeElement);\n                    }\n                }\n\n                function setProgressBar() {\n                    if (options.progressBar) {\n                        $progressElement.addClass(options.progressClass);\n                        $toastElement.prepend($progressElement);\n                    }\n                }\n\n                function setRTL() {\n                    if (options.rtl) {\n                        $toastElement.addClass('rtl');\n                    }\n                }\n\n                function shouldExit(options, map) {\n                    if (options.preventDuplicates) {\n                        if (map.message === previousToast) {\n                            return true;\n                        } else {\n                            previousToast = map.message;\n                        }\n                    }\n                    return false;\n                }\n\n                function hideToast(override) {\n                    var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;\n                    var duration = override && options.closeDuration !== false ?\n                        options.closeDuration : options.hideDuration;\n                    var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;\n                    if ($(':focus', $toastElement).length && !override) {\n                        return;\n                    }\n                    clearTimeout(progressBar.intervalId);\n                    return $toastElement[method]({\n                        duration: duration,\n                        easing: easing,\n                        complete: function () {\n                            removeToast($toastElement);\n                            clearTimeout(intervalId);\n                            if (options.onHidden && response.state !== 'hidden') {\n                                options.onHidden();\n                            }\n                            response.state = 'hidden';\n                            response.endTime = new Date();\n                            publish(response);\n                        }\n                    });\n                }\n\n                function delayedHideToast() {\n                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                        intervalId = setTimeout(hideToast, options.extendedTimeOut);\n                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);\n                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                    }\n                }\n\n                function stickAround() {\n                    clearTimeout(intervalId);\n                    progressBar.hideEta = 0;\n                    $toastElement.stop(true, true)[options.showMethod](\n                        {duration: options.showDuration, easing: options.showEasing}\n                    );\n                }\n\n                function updateProgress() {\n                    var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;\n                    $progressElement.width(percentage + '%');\n                }\n            }\n\n            function getOptions() {\n                return $.extend({}, getDefaults(), toastr.options);\n            }\n\n            function removeToast($toastElement) {\n                if (!$container) { $container = getContainer(); }\n                if ($toastElement.is(':visible')) {\n                    return;\n                }\n                $toastElement.remove();\n                $toastElement = null;\n                if ($container.children().length === 0) {\n                    $container.remove();\n                    previousToast = undefined;\n                }\n            }\n\n        })();\n    });\n}(typeof define === 'function' && define.amd ? define : function (deps, factory) {\n    if (typeof module !== 'undefined' && module.exports) { //Node\n        module.exports = factory(require('jquery'));\n    } else {\n        window.toastr = factory(window.jQuery);\n    }\n}));\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","//     JavaScript Expression Parser (JSEP) 0.3.5\n//     JSEP may be freely distributed under the MIT License\n//     https://ericsmekens.github.io/jsep/\n\n/*global module: true, exports: true, console: true */\n(function (root) {\n\t'use strict';\n\t// Node Types\n\t// ----------\n\n\t// This is the full set of types that any JSEP node can be.\n\t// Store them here to save space when minified\n\tvar COMPOUND = 'Compound',\n\t\tIDENTIFIER = 'Identifier',\n\t\tMEMBER_EXP = 'MemberExpression',\n\t\tLITERAL = 'Literal',\n\t\tTHIS_EXP = 'ThisExpression',\n\t\tCALL_EXP = 'CallExpression',\n\t\tUNARY_EXP = 'UnaryExpression',\n\t\tBINARY_EXP = 'BinaryExpression',\n\t\tLOGICAL_EXP = 'LogicalExpression',\n\t\tCONDITIONAL_EXP = 'ConditionalExpression',\n\t\tARRAY_EXP = 'ArrayExpression',\n\n\t\tPERIOD_CODE = 46, // '.'\n\t\tCOMMA_CODE  = 44, // ','\n\t\tSQUOTE_CODE = 39, // single quote\n\t\tDQUOTE_CODE = 34, // double quotes\n\t\tOPAREN_CODE = 40, // (\n\t\tCPAREN_CODE = 41, // )\n\t\tOBRACK_CODE = 91, // [\n\t\tCBRACK_CODE = 93, // ]\n\t\tQUMARK_CODE = 63, // ?\n\t\tSEMCOL_CODE = 59, // ;\n\t\tCOLON_CODE  = 58, // :\n\n\t\tthrowError = function(message, index) {\n\t\t\tvar error = new Error(message + ' at character ' + index);\n\t\t\terror.index = index;\n\t\t\terror.description = message;\n\t\t\tthrow error;\n\t\t},\n\n\t// Operations\n\t// ----------\n\n\t// Set `t` to `true` to save space (when minified, not gzipped)\n\t\tt = true,\n\t// Use a quickly-accessible map to store all of the unary operators\n\t// Values are set to `true` (it really doesn't matter)\n\t\tunary_ops = {'-': t, '!': t, '~': t, '+': t},\n\t// Also use a map for the binary operations but set their values to their\n\t// binary precedence for quick reference:\n\t// see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)\n\t\tbinary_ops = {\n\t\t\t'||': 1, '&&': 2, '|': 3,  '^': 4,  '&': 5,\n\t\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\n\t\t\t'<': 7,  '>': 7,  '<=': 7,  '>=': 7,\n\t\t\t'<<':8,  '>>': 8, '>>>': 8,\n\t\t\t'+': 9, '-': 9,\n\t\t\t'*': 10, '/': 10, '%': 10\n\t\t},\n\t// Get return the longest key length of any object\n\t\tgetMaxKeyLen = function(obj) {\n\t\t\tvar max_len = 0, len;\n\t\t\tfor(var key in obj) {\n\t\t\t\tif((len = key.length) > max_len && obj.hasOwnProperty(key)) {\n\t\t\t\t\tmax_len = len;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn max_len;\n\t\t},\n\t\tmax_unop_len = getMaxKeyLen(unary_ops),\n\t\tmax_binop_len = getMaxKeyLen(binary_ops),\n\t// Literals\n\t// ----------\n\t// Store the values to return for the various literals we may encounter\n\t\tliterals = {\n\t\t\t'true': true,\n\t\t\t'false': false,\n\t\t\t'null': null\n\t\t},\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\n\t\tthis_str = 'this',\n\t// Returns the precedence of a binary operator or `0` if it isn't a binary operator\n\t\tbinaryPrecedence = function(op_val) {\n\t\t\treturn binary_ops[op_val] || 0;\n\t\t},\n\t// Utility function (gets called from multiple places)\n\t// Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n\t\tcreateBinaryExpression = function (operator, left, right) {\n\t\t\tvar type = (operator === '||' || operator === '&&') ? LOGICAL_EXP : BINARY_EXP;\n\t\t\treturn {\n\t\t\t\ttype: type,\n\t\t\t\toperator: operator,\n\t\t\t\tleft: left,\n\t\t\t\tright: right\n\t\t\t};\n\t\t},\n\t\t// `ch` is a character code in the next three functions\n\t\tisDecimalDigit = function(ch) {\n\t\t\treturn (ch >= 48 && ch <= 57); // 0...9\n\t\t},\n\t\tisIdentifierStart = function(ch) {\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\n                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator\n\t\t},\n\t\tisIdentifierPart = function(ch) {\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\n\t\t\t\t\t(ch >= 48 && ch <= 57) || // 0...9\n                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator\n\t\t},\n\n\t\t// Parsing\n\t\t// -------\n\t\t// `expr` is a string with the passed in expression\n\t\tjsep = function(expr) {\n\t\t\t// `index` stores the character number we are currently at while `length` is a constant\n\t\t\t// All of the gobbles below will modify `index` as we move along\n\t\t\tvar index = 0,\n\t\t\t\tcharAtFunc = expr.charAt,\n\t\t\t\tcharCodeAtFunc = expr.charCodeAt,\n\t\t\t\texprI = function(i) { return charAtFunc.call(expr, i); },\n\t\t\t\texprICode = function(i) { return charCodeAtFunc.call(expr, i); },\n\t\t\t\tlength = expr.length,\n\n\t\t\t\t// Push `index` up to the next non-space character\n\t\t\t\tgobbleSpaces = function() {\n\t\t\t\t\tvar ch = exprICode(index);\n\t\t\t\t\t// space or tab\n\t\t\t\t\twhile(ch === 32 || ch === 9 || ch === 10 || ch === 13) {\n\t\t\t\t\t\tch = exprICode(++index);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// The main parsing function. Much of this code is dedicated to ternary expressions\n\t\t\t\tgobbleExpression = function() {\n\t\t\t\t\tvar test = gobbleBinaryExpression(),\n\t\t\t\t\t\tconsequent, alternate;\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tif(exprICode(index) === QUMARK_CODE) {\n\t\t\t\t\t\t// Ternary expression: test ? consequent : alternate\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tconsequent = gobbleExpression();\n\t\t\t\t\t\tif(!consequent) {\n\t\t\t\t\t\t\tthrowError('Expected expression', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tif(exprICode(index) === COLON_CODE) {\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\talternate = gobbleExpression();\n\t\t\t\t\t\t\tif(!alternate) {\n\t\t\t\t\t\t\t\tthrowError('Expected expression', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\t\t\ttest: test,\n\t\t\t\t\t\t\t\tconsequent: consequent,\n\t\t\t\t\t\t\t\talternate: alternate\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrowError('Expected :', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn test;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Search for the operation portion of the string (e.g. `+`, `===`)\n\t\t\t\t// Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n\t\t\t\t// and move down from 3 to 2 to 1 character until a matching binary operation is found\n\t\t\t\t// then, return that binary operation\n\t\t\t\tgobbleBinaryOp = function() {\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tvar biop, to_check = expr.substr(index, max_binop_len), tc_len = to_check.length;\n\t\t\t\t\twhile(tc_len > 0) {\n\t\t\t\t\t\t// Don't accept a binary op when it is an identifier.\n\t\t\t\t\t\t// Binary ops that start with a identifier-valid character must be followed\n\t\t\t\t\t\t// by a non identifier-part valid character\n\t\t\t\t\t\tif(binary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t\t\t\t!isIdentifierStart(exprICode(index)) ||\n\t\t\t\t\t\t\t(index+to_check.length< expr.length && !isIdentifierPart(exprICode(index+to_check.length)))\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tindex += tc_len;\n\t\t\t\t\t\t\treturn to_check;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// This function is responsible for gobbling an individual expression,\n\t\t\t\t// e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n\t\t\t\tgobbleBinaryExpression = function() {\n\t\t\t\t\tvar ch_i, node, biop, prec, stack, biop_info, left, right, i, cur_biop;\n\n\t\t\t\t\t// First, try to get the leftmost thing\n\t\t\t\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\n\t\t\t\t\tleft = gobbleToken();\n\t\t\t\t\tbiop = gobbleBinaryOp();\n\n\t\t\t\t\t// If there wasn't a binary operator, just return the leftmost node\n\t\t\t\t\tif(!biop) {\n\t\t\t\t\t\treturn left;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\n\t\t\t\t\t// precedence structure\n\t\t\t\t\tbiop_info = { value: biop, prec: binaryPrecedence(biop)};\n\n\t\t\t\t\tright = gobbleToken();\n\t\t\t\t\tif(!right) {\n\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\n\t\t\t\t\t}\n\t\t\t\t\tstack = [left, biop_info, right];\n\n\t\t\t\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\t\t\t\t\twhile((biop = gobbleBinaryOp())) {\n\t\t\t\t\t\tprec = binaryPrecedence(biop);\n\n\t\t\t\t\t\tif(prec === 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbiop_info = { value: biop, prec: prec };\n\n\t\t\t\t\t\tcur_biop = biop;\n\t\t\t\t\t\t// Reduce: make a binary expression from the three topmost entries.\n\t\t\t\t\t\twhile ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t\t\t\t\t\t\tright = stack.pop();\n\t\t\t\t\t\t\tbiop = stack.pop().value;\n\t\t\t\t\t\t\tleft = stack.pop();\n\t\t\t\t\t\t\tnode = createBinaryExpression(biop, left, right);\n\t\t\t\t\t\t\tstack.push(node);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnode = gobbleToken();\n\t\t\t\t\t\tif(!node) {\n\t\t\t\t\t\t\tthrowError(\"Expected expression after \" + cur_biop, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstack.push(biop_info, node);\n\t\t\t\t\t}\n\n\t\t\t\t\ti = stack.length - 1;\n\t\t\t\t\tnode = stack[i];\n\t\t\t\t\twhile(i > 1) {\n\t\t\t\t\t\tnode = createBinaryExpression(stack[i - 1].value, stack[i - 2], node);\n\t\t\t\t\t\ti -= 2;\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t},\n\n\t\t\t\t// An individual part of a binary expression:\n\t\t\t\t// e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n\t\t\t\tgobbleToken = function() {\n\t\t\t\t\tvar ch, to_check, tc_len;\n\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tch = exprICode(index);\n\n\t\t\t\t\tif(isDecimalDigit(ch) || ch === PERIOD_CODE) {\n\t\t\t\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\n\t\t\t\t\t\treturn gobbleNumericLiteral();\n\t\t\t\t\t} else if(ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n\t\t\t\t\t\t// Single or double quotes\n\t\t\t\t\t\treturn gobbleStringLiteral();\n\t\t\t\t\t} else if (ch === OBRACK_CODE) {\n\t\t\t\t\t\treturn gobbleArray();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tto_check = expr.substr(index, max_unop_len);\n\t\t\t\t\t\ttc_len = to_check.length;\n\t\t\t\t\t\twhile(tc_len > 0) {\n\t\t\t\t\t\t// Don't accept an unary op when it is an identifier.\n\t\t\t\t\t\t// Unary ops that start with a identifier-valid character must be followed\n\t\t\t\t\t\t// by a non identifier-part valid character\n\t\t\t\t\t\t\tif(unary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t\t\t\t\t!isIdentifierStart(exprICode(index)) ||\n\t\t\t\t\t\t\t\t(index+to_check.length < expr.length && !isIdentifierPart(exprICode(index+to_check.length)))\n\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\tindex += tc_len;\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: UNARY_EXP,\n\t\t\t\t\t\t\t\t\toperator: to_check,\n\t\t\t\t\t\t\t\t\targument: gobbleToken(),\n\t\t\t\t\t\t\t\t\tprefix: true\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isIdentifierStart(ch) || ch === OPAREN_CODE) { // open parenthesis\n\t\t\t\t\t\t\t// `foo`, `bar.baz`\n\t\t\t\t\t\t\treturn gobbleVariable();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\t// Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n\t\t\t\t// keep track of everything in the numeric literal and then calling `parseFloat` on that string\n\t\t\t\tgobbleNumericLiteral = function() {\n\t\t\t\t\tvar number = '', ch, chCode;\n\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\n\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(exprICode(index) === PERIOD_CODE) { // can start with a decimal marker\n\t\t\t\t\t\tnumber += exprI(index++);\n\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tch = exprI(index);\n\t\t\t\t\tif(ch === 'e' || ch === 'E') { // exponent marker\n\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\tch = exprI(index);\n\t\t\t\t\t\tif(ch === '+' || ch === '-') { // exponent sign\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) { //exponent itself\n\t\t\t\t\t\t\tnumber += exprI(index++);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isDecimalDigit(exprICode(index-1)) ) {\n\t\t\t\t\t\t\tthrowError('Expected exponent (' + number + exprI(index) + ')', index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\tchCode = exprICode(index);\n\t\t\t\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\n\t\t\t\t\tif(isIdentifierStart(chCode)) {\n\t\t\t\t\t\tthrowError('Variable names cannot start with a number (' +\n\t\t\t\t\t\t\t\t\tnumber + exprI(index) + ')', index);\n\t\t\t\t\t} else if(chCode === PERIOD_CODE) {\n\t\t\t\t\t\tthrowError('Unexpected period', index);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\tvalue: parseFloat(number),\n\t\t\t\t\t\traw: number\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t// Parses a string literal, staring with single or double quotes with basic support for escape codes\n\t\t\t\t// e.g. `\"hello world\"`, `'this is\\nJSEP'`\n\t\t\t\tgobbleStringLiteral = function() {\n\t\t\t\t\tvar str = '', quote = exprI(index++), closed = false, ch;\n\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tch = exprI(index++);\n\t\t\t\t\t\tif(ch === quote) {\n\t\t\t\t\t\t\tclosed = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if(ch === '\\\\') {\n\t\t\t\t\t\t\t// Check for all of the common escape codes\n\t\t\t\t\t\t\tch = exprI(index++);\n\t\t\t\t\t\t\tswitch(ch) {\n\t\t\t\t\t\t\t\tcase 'n': str += '\\n'; break;\n\t\t\t\t\t\t\t\tcase 'r': str += '\\r'; break;\n\t\t\t\t\t\t\t\tcase 't': str += '\\t'; break;\n\t\t\t\t\t\t\t\tcase 'b': str += '\\b'; break;\n\t\t\t\t\t\t\t\tcase 'f': str += '\\f'; break;\n\t\t\t\t\t\t\t\tcase 'v': str += '\\x0B'; break;\n\t\t\t\t\t\t\t\tdefault : str += ch;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr += ch;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!closed) {\n\t\t\t\t\t\tthrowError('Unclosed quote after \"'+str+'\"', index);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\tvalue: str,\n\t\t\t\t\t\traw: quote + str + quote\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t// Gobbles only identifiers\n\t\t\t\t// e.g.: `foo`, `_value`, `$x1`\n\t\t\t\t// Also, this function checks if that identifier is a literal:\n\t\t\t\t// (e.g. `true`, `false`, `null`) or `this`\n\t\t\t\tgobbleIdentifier = function() {\n\t\t\t\t\tvar ch = exprICode(index), start = index, identifier;\n\n\t\t\t\t\tif(isIdentifierStart(ch)) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrowError('Unexpected ' + exprI(index), index);\n\t\t\t\t\t}\n\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tch = exprICode(index);\n\t\t\t\t\t\tif(isIdentifierPart(ch)) {\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tidentifier = expr.slice(start, index);\n\n\t\t\t\t\tif(literals.hasOwnProperty(identifier)) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: LITERAL,\n\t\t\t\t\t\t\tvalue: literals[identifier],\n\t\t\t\t\t\t\traw: identifier\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if(identifier === this_str) {\n\t\t\t\t\t\treturn { type: THIS_EXP };\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: IDENTIFIER,\n\t\t\t\t\t\t\tname: identifier\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Gobbles a list of arguments within the context of a function call\n\t\t\t\t// or array literal. This function also assumes that the opening character\n\t\t\t\t// `(` or `[` has already been gobbled, and gobbles expressions and commas\n\t\t\t\t// until the terminator character `)` or `]` is encountered.\n\t\t\t\t// e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n\t\t\t\tgobbleArguments = function(termination) {\n\t\t\t\t\tvar ch_i, args = [], node, closed = false;\n\t\t\t\t\tvar separator_count = 0;\n\t\t\t\t\twhile(index < length) {\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\tif(ch_i === termination) { // done parsing\n\t\t\t\t\t\t\tclosed = true;\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\tif(termination === CPAREN_CODE && separator_count && separator_count >= args.length){\n\t\t\t\t\t\t\t\tthrowError('Unexpected token ' + String.fromCharCode(termination), index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (ch_i === COMMA_CODE) { // between expressions\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\tseparator_count++;\n\t\t\t\t\t\t\tif(separator_count !== args.length) { // missing argument\n\t\t\t\t\t\t\t\tif(termination === CPAREN_CODE) {\n\t\t\t\t\t\t\t\t\tthrowError('Unexpected token ,', index);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if(termination === CBRACK_CODE) {\n\t\t\t\t\t\t\t\t\tfor(var arg = args.length; arg< separator_count; arg++) {\n\t\t\t\t\t\t\t\t\t\targs.push(null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = gobbleExpression();\n\t\t\t\t\t\t\tif(!node || node.type === COMPOUND) {\n\t\t\t\t\t\t\t\tthrowError('Expected comma', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\targs.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!closed) {\n\t\t\t\t\t\tthrowError('Expected ' + String.fromCharCode(termination), index);\n\t\t\t\t\t}\n\t\t\t\t\treturn args;\n\t\t\t\t},\n\n\t\t\t\t// Gobble a non-literal variable name. This variable name may include properties\n\t\t\t\t// e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n\t\t\t\t// It also gobbles function calls:\n\t\t\t\t// e.g. `Math.acos(obj.angle)`\n\t\t\t\tgobbleVariable = function() {\n\t\t\t\t\tvar ch_i, node;\n\t\t\t\t\tch_i = exprICode(index);\n\n\t\t\t\t\tif(ch_i === OPAREN_CODE) {\n\t\t\t\t\t\tnode = gobbleGroup();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = gobbleIdentifier();\n\t\t\t\t\t}\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\twhile(ch_i === PERIOD_CODE || ch_i === OBRACK_CODE || ch_i === OPAREN_CODE) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\tif(ch_i === PERIOD_CODE) {\n\t\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\n\t\t\t\t\t\t\t\tcomputed: false,\n\t\t\t\t\t\t\t\tobject: node,\n\t\t\t\t\t\t\t\tproperty: gobbleIdentifier()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if(ch_i === OBRACK_CODE) {\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\n\t\t\t\t\t\t\t\tcomputed: true,\n\t\t\t\t\t\t\t\tobject: node,\n\t\t\t\t\t\t\t\tproperty: gobbleExpression()\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t\t\tif(ch_i !== CBRACK_CODE) {\n\t\t\t\t\t\t\t\tthrowError('Unclosed [', index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t} else if(ch_i === OPAREN_CODE) {\n\t\t\t\t\t\t\t// A function call is being made; gobble all the arguments\n\t\t\t\t\t\t\tnode = {\n\t\t\t\t\t\t\t\ttype: CALL_EXP,\n\t\t\t\t\t\t\t\t'arguments': gobbleArguments(CPAREN_CODE),\n\t\t\t\t\t\t\t\tcallee: node\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\t\tch_i = exprICode(index);\n\t\t\t\t\t}\n\t\t\t\t\treturn node;\n\t\t\t\t},\n\n\t\t\t\t// Responsible for parsing a group of things within parentheses `()`\n\t\t\t\t// This function assumes that it needs to gobble the opening parenthesis\n\t\t\t\t// and then tries to gobble everything within that parenthesis, assuming\n\t\t\t\t// that the next thing it should see is the close parenthesis. If not,\n\t\t\t\t// then the expression probably doesn't have a `)`\n\t\t\t\tgobbleGroup = function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\tvar node = gobbleExpression();\n\t\t\t\t\tgobbleSpaces();\n\t\t\t\t\tif(exprICode(index) === CPAREN_CODE) {\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\treturn node;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrowError('Unclosed (', index);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Responsible for parsing Array literals `[1, 2, 3]`\n\t\t\t\t// This function assumes that it needs to gobble the opening bracket\n\t\t\t\t// and then tries to gobble the expressions as arguments.\n\t\t\t\tgobbleArray = function() {\n\t\t\t\t\tindex++;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: ARRAY_EXP,\n\t\t\t\t\t\telements: gobbleArguments(CBRACK_CODE)\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\tnodes = [], ch_i, node;\n\n\t\t\twhile(index < length) {\n\t\t\t\tch_i = exprICode(index);\n\n\t\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\n\t\t\t\t// separators\n\t\t\t\tif(ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {\n\t\t\t\t\tindex++; // ignore separators\n\t\t\t\t} else {\n\t\t\t\t\t// Try to gobble each expression individually\n\t\t\t\t\tif((node = gobbleExpression())) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\n\t\t\t\t\t// the expression passed in probably has too much\n\t\t\t\t\t} else if(index < length) {\n\t\t\t\t\t\tthrowError('Unexpected \"' + exprI(index) + '\"', index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there's only one expression just try returning the expression\n\t\t\tif(nodes.length === 1) {\n\t\t\t\treturn nodes[0];\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype: COMPOUND,\n\t\t\t\t\tbody: nodes\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t// To be filled in by the template\n\tjsep.version = '0.3.5';\n\tjsep.toString = function() { return 'JavaScript Expression Parser (JSEP) v' + jsep.version; };\n\n\t/**\n\t * @method jsep.addUnaryOp\n\t * @param {string} op_name The name of the unary op to add\n\t * @return jsep\n\t */\n\tjsep.addUnaryOp = function(op_name) {\n\t\tmax_unop_len = Math.max(op_name.length, max_unop_len);\n\t\tunary_ops[op_name] = t; return this;\n\t};\n\n\t/**\n\t * @method jsep.addBinaryOp\n\t * @param {string} op_name The name of the binary op to add\n\t * @param {number} precedence The precedence of the binary op (can be a float)\n\t * @return jsep\n\t */\n\tjsep.addBinaryOp = function(op_name, precedence) {\n\t\tmax_binop_len = Math.max(op_name.length, max_binop_len);\n\t\tbinary_ops[op_name] = precedence;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.addLiteral\n\t * @param {string} literal_name The name of the literal to add\n\t * @param {*} literal_value The value of the literal\n\t * @return jsep\n\t */\n\tjsep.addLiteral = function(literal_name, literal_value) {\n\t\tliterals[literal_name] = literal_value;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeUnaryOp\n\t * @param {string} op_name The name of the unary op to remove\n\t * @return jsep\n\t */\n\tjsep.removeUnaryOp = function(op_name) {\n\t\tdelete unary_ops[op_name];\n\t\tif(op_name.length === max_unop_len) {\n\t\t\tmax_unop_len = getMaxKeyLen(unary_ops);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeAllUnaryOps\n\t * @return jsep\n\t */\n\tjsep.removeAllUnaryOps = function() {\n\t\tunary_ops = {};\n\t\tmax_unop_len = 0;\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeBinaryOp\n\t * @param {string} op_name The name of the binary op to remove\n\t * @return jsep\n\t */\n\tjsep.removeBinaryOp = function(op_name) {\n\t\tdelete binary_ops[op_name];\n\t\tif(op_name.length === max_binop_len) {\n\t\t\tmax_binop_len = getMaxKeyLen(binary_ops);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeAllBinaryOps\n\t * @return jsep\n\t */\n\tjsep.removeAllBinaryOps = function() {\n\t\tbinary_ops = {};\n\t\tmax_binop_len = 0;\n\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeLiteral\n\t * @param {string} literal_name The name of the literal to remove\n\t * @return jsep\n\t */\n\tjsep.removeLiteral = function(literal_name) {\n\t\tdelete literals[literal_name];\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method jsep.removeAllLiterals\n\t * @return jsep\n\t */\n\tjsep.removeAllLiterals = function() {\n\t\tliterals = {};\n\n\t\treturn this;\n\t};\n\n\t// In desktop environments, have a way to restore the old value for `jsep`\n\tif (typeof exports === 'undefined') {\n\t\tvar old_jsep = root.jsep;\n\t\t// The star of the show! It's a function!\n\t\troot.jsep = jsep;\n\t\t// And a courteous function willing to move out of the way for other similarly-named objects!\n\t\tjsep.noConflict = function() {\n\t\t\tif(root.jsep === jsep) {\n\t\t\t\troot.jsep = old_jsep;\n\t\t\t}\n\t\t\treturn jsep;\n\t\t};\n\t} else {\n\t\t// In Node.JS environments\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = jsep;\n\t\t} else {\n\t\t\texports.parse = jsep;\n\t\t}\n\t}\n}(this));\n","/*=============================================================================\r\n\tAuthor:\t\t\tEric M. Barnard - @ericmbarnard\t\t\t\t\t\t\t\t\r\n\tLicense:\t\tMIT (http://opensource.org/licenses/mit-license.php)\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\tDescription:\tValidation Library for KnockoutJS\t\t\t\t\t\t\t\r\n\tVersion:\t\t2.0.4\t\t\t\t\t\t\t\t\t\t\t\r\n===============================================================================\r\n*/\r\n/*globals require: false, exports: false, define: false, ko: false */\r\n\r\n(function (factory) {\r\n\t// Module systems magic dance.\r\n\r\n\tif (typeof require === \"function\" && typeof exports === \"object\" && typeof module === \"object\") {\r\n\t\t// CommonJS or Node: hard-coded dependency on \"knockout\"\r\n\t\tfactory(require(\"knockout\"), exports);\r\n\t} else if (typeof define === \"function\" && define[\"amd\"]) {\r\n\t\t// AMD anonymous module with hard-coded dependency on \"knockout\"\r\n\t\tdefine([\"knockout\", \"exports\"], factory);\r\n\t} else {\r\n\t\t// <script> tag: use the global `ko` object, attaching a `validation` property\r\n\t\tfactory(ko, ko.validation = {});\r\n\t}\r\n}(function ( ko, exports ) {\r\n\r\n\tif (typeof (ko) === 'undefined') {\r\n\t\tthrow new Error('Knockout is required, please ensure it is loaded before loading this validation plug-in');\r\n\t}\r\n\r\n\t// create our namespace object\r\n\tko.validation = exports;\r\n\r\n\tvar kv = ko.validation,\r\n\t\tkoUtils = ko.utils,\r\n\t\tunwrap = koUtils.unwrapObservable,\r\n\t\tforEach = koUtils.arrayForEach,\r\n\t\textend = koUtils.extend;\r\n;/*global ko: false*/\r\n\r\nvar defaults = {\r\n\tregisterExtenders: true,\r\n\tmessagesOnModified: true,\r\n\terrorsAsTitle: true,            // enables/disables showing of errors as title attribute of the target element.\r\n\terrorsAsTitleOnModified: false, // shows the error when hovering the input field (decorateElement must be true)\r\n\tmessageTemplate: null,\r\n\tinsertMessages: true,           // automatically inserts validation messages as <span></span>\r\n\tparseInputAttributes: false,    // parses the HTML5 validation attribute from a form element and adds that to the object\r\n\twriteInputAttributes: false,    // adds HTML5 input validation attributes to form elements that ko observable's are bound to\r\n\tdecorateInputElement: false,         // false to keep backward compatibility\r\n\tdecorateElementOnModified: true,// true to keep backward compatibility\r\n\terrorClass: null,               // single class for error message and element\r\n\terrorElementClass: 'validationElement',  // class to decorate error element\r\n\terrorMessageClass: 'validationMessage',  // class to decorate error message\r\n\tallowHtmlMessages: false,\t\t// allows HTML in validation messages\r\n\tgrouping: {\r\n\t\tdeep: false,        //by default grouping is shallow\r\n\t\tobservable: true,   //and using observables\r\n\t\tlive: false\t\t    //react to changes to observableArrays if observable === true\r\n\t},\r\n\tvalidate: {\r\n\t\t// throttle: 10\r\n\t}\r\n};\r\n\r\n// make a copy  so we can use 'reset' later\r\nvar configuration = extend({}, defaults);\r\n\r\nconfiguration.html5Attributes = ['required', 'pattern', 'min', 'max', 'step'];\r\nconfiguration.html5InputTypes = ['email', 'number', 'date'];\r\n\r\nconfiguration.reset = function () {\r\n\textend(configuration, defaults);\r\n};\r\n\r\nkv.configuration = configuration;\r\n;kv.utils = (function () {\r\n\tvar seedId = new Date().getTime();\r\n\r\n\tvar domData = {}; //hash of data objects that we reference from dom elements\r\n\tvar domDataKey = '__ko_validation__';\r\n\r\n\treturn {\r\n\t\tisArray: function (o) {\r\n\t\t\treturn o.isArray || Object.prototype.toString.call(o) === '[object Array]';\r\n\t\t},\r\n\t\tisObject: function (o) {\r\n\t\t\treturn o !== null && typeof o === 'object';\r\n\t\t},\r\n\t\tisNumber: function(o) {\r\n\t\t\treturn !isNaN(o);\r\n\t\t},\r\n\t\tisObservableArray: function(instance) {\r\n\t\t\treturn !!instance &&\r\n\t\t\t\t\ttypeof instance[\"remove\"] === \"function\" &&\r\n\t\t\t\t\ttypeof instance[\"removeAll\"] === \"function\" &&\r\n\t\t\t\t\ttypeof instance[\"destroy\"] === \"function\" &&\r\n\t\t\t\t\ttypeof instance[\"destroyAll\"] === \"function\" &&\r\n\t\t\t\t\ttypeof instance[\"indexOf\"] === \"function\" &&\r\n\t\t\t\t\ttypeof instance[\"replace\"] === \"function\";\r\n\t\t},\r\n\t\tvalues: function (o) {\r\n\t\t\tvar r = [];\r\n\t\t\tfor (var i in o) {\r\n\t\t\t\tif (o.hasOwnProperty(i)) {\r\n\t\t\t\t\tr.push(o[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t},\r\n\t\tgetValue: function (o) {\r\n\t\t\treturn (typeof o === 'function' ? o() : o);\r\n\t\t},\r\n\t\thasAttribute: function (node, attr) {\r\n\t\t\treturn node.getAttribute(attr) !== null;\r\n\t\t},\r\n\t\tgetAttribute: function (element, attr) {\r\n\t\t\treturn element.getAttribute(attr);\r\n\t\t},\r\n\t\tsetAttribute: function (element, attr, value) {\r\n\t\t\treturn element.setAttribute(attr, value);\r\n\t\t},\r\n\t\tisValidatable: function (o) {\r\n\t\t\treturn !!(o && o.rules && o.isValid && o.isModified);\r\n\t\t},\r\n\t\tinsertAfter: function (node, newNode) {\r\n\t\t\tnode.parentNode.insertBefore(newNode, node.nextSibling);\r\n\t\t},\r\n\t\tnewId: function () {\r\n\t\t\treturn seedId += 1;\r\n\t\t},\r\n\t\tgetConfigOptions: function (element) {\r\n\t\t\tvar options = kv.utils.contextFor(element);\r\n\r\n\t\t\treturn options || kv.configuration;\r\n\t\t},\r\n\t\tsetDomData: function (node, data) {\r\n\t\t\tvar key = node[domDataKey];\r\n\r\n\t\t\tif (!key) {\r\n\t\t\t\tnode[domDataKey] = key = kv.utils.newId();\r\n\t\t\t}\r\n\r\n\t\t\tdomData[key] = data;\r\n\t\t},\r\n\t\tgetDomData: function (node) {\r\n\t\t\tvar key = node[domDataKey];\r\n\r\n\t\t\tif (!key) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\r\n\t\t\treturn domData[key];\r\n\t\t},\r\n\t\tcontextFor: function (node) {\r\n\t\t\tswitch (node.nodeType) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tvar context = kv.utils.getDomData(node);\r\n\t\t\t\t\tif (context) { return context; }\r\n\t\t\t\t\tif (node.parentNode) { return kv.utils.contextFor(node.parentNode); }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn undefined;\r\n\t\t},\r\n\t\tisEmptyVal: function (val) {\r\n\t\t\tif (val === undefined) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (val === null) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (val === \"\") {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tgetOriginalElementTitle: function (element) {\r\n\t\t\tvar savedOriginalTitle = kv.utils.getAttribute(element, 'data-orig-title'),\r\n\t\t\t\tcurrentTitle = element.title,\r\n\t\t\t\thasSavedOriginalTitle = kv.utils.hasAttribute(element, 'data-orig-title');\r\n\r\n\t\t\treturn hasSavedOriginalTitle ?\r\n\t\t\t\tsavedOriginalTitle : currentTitle;\r\n\t\t},\r\n\t\tasync: function (expr) {\r\n\t\t\tif (window.setImmediate) { window.setImmediate(expr); }\r\n\t\t\telse { window.setTimeout(expr, 0); }\r\n\t\t},\r\n\t\tforEach: function (object, callback) {\r\n\t\t\tif (kv.utils.isArray(object)) {\r\n\t\t\t\treturn forEach(object, callback);\r\n\t\t\t}\r\n\t\t\tfor (var prop in object) {\r\n\t\t\t\tif (object.hasOwnProperty(prop)) {\r\n\t\t\t\t\tcallback(object[prop], prop);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}());\r\n;var api = (function () {\r\n\r\n\tvar isInitialized = 0,\r\n\t\tconfiguration = kv.configuration,\r\n\t\tutils = kv.utils;\r\n\r\n\tfunction cleanUpSubscriptions(context) {\r\n\t\tforEach(context.subscriptions, function (subscription) {\r\n\t\t\tsubscription.dispose();\r\n\t\t});\r\n\t\tcontext.subscriptions = [];\r\n\t}\r\n\r\n\tfunction dispose(context) {\r\n\t\tif (context.options.deep) {\r\n\t\t\tforEach(context.flagged, function (obj) {\r\n\t\t\t\tdelete obj.__kv_traversed;\r\n\t\t\t});\r\n\t\t\tcontext.flagged.length = 0;\r\n\t\t}\r\n\r\n\t\tif (!context.options.live) {\r\n\t\t\tcleanUpSubscriptions(context);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction traverseGraph(obj, context, level) {\r\n\t\tvar objValues = [],\r\n\t\t\tval = obj.peek ? obj.peek() : obj;\r\n\r\n\t\tif (obj.__kv_traversed === true) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (context.options.deep) {\r\n\t\t\tobj.__kv_traversed = true;\r\n\t\t\tcontext.flagged.push(obj);\r\n\t\t}\r\n\r\n\t\t//default level value depends on deep option.\r\n\t\tlevel = (level !== undefined ? level : context.options.deep ? 1 : -1);\r\n\r\n\t\t// if object is observable then add it to the list\r\n\t\tif (ko.isObservable(obj)) {\r\n\t\t\t// ensure it's validatable but don't extend validatedObservable because it\r\n\t\t\t// would overwrite isValid property.\r\n\t\t\tif (!obj.errors && !utils.isValidatable(obj)) {\r\n\t\t\t\tobj.extend({ validatable: true });\r\n\t\t\t}\r\n\t\t\tcontext.validatables.push(obj);\r\n\r\n\t\t\tif (context.options.live && utils.isObservableArray(obj)) {\r\n\t\t\t\tcontext.subscriptions.push(obj.subscribe(function () {\r\n\t\t\t\t\tcontext.graphMonitor.valueHasMutated();\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//get list of values either from array or object but ignore non-objects\r\n\t\t// and destroyed objects\r\n\t\tif (val && !val._destroy) {\r\n\t\t\tif (utils.isArray(val)) {\r\n\t\t\t\tobjValues = val;\r\n\t\t\t}\r\n\t\t\telse if (utils.isObject(val)) {\r\n\t\t\t\tobjValues = utils.values(val);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//process recursively if it is deep grouping\r\n\t\tif (level !== 0) {\r\n\t\t\tutils.forEach(objValues, function (observable) {\r\n\t\t\t\t//but not falsy things and not HTML Elements\r\n\t\t\t\tif (observable && !observable.nodeType && (!ko.isComputed(observable) || observable.rules)) {\r\n\t\t\t\t\ttraverseGraph(observable, context, level + 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction runTraversal(obj, context) {\r\n\t\tcontext.validatables = [];\r\n\t\tcleanUpSubscriptions(context);\r\n\t\ttraverseGraph(obj, context);\r\n\t\tdispose(context);\r\n\t}\r\n\r\n\tfunction collectErrors(array) {\r\n\t\tvar errors = [];\r\n\t\tforEach(array, function (observable) {\r\n\t\t\t// Do not collect validatedObservable errors\r\n\t\t\tif (utils.isValidatable(observable) && !observable.isValid()) {\r\n\t\t\t\t// Use peek because we don't want a dependency for 'error' property because it\r\n\t\t\t\t// changes before 'isValid' does. (Issue #99)\r\n\t\t\t\terrors.push(observable.error.peek());\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn errors;\r\n\t}\r\n\r\n\treturn {\r\n\t\t//Call this on startup\r\n\t\t//any config can be overridden with the passed in options\r\n\t\tinit: function (options, force) {\r\n\t\t\t//done run this multiple times if we don't really want to\r\n\t\t\tif (isInitialized > 0 && !force) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//because we will be accessing options properties it has to be an object at least\r\n\t\t\toptions = options || {};\r\n\t\t\t//if specific error classes are not provided then apply generic errorClass\r\n\t\t\t//it has to be done on option so that options.errorClass can override default\r\n\t\t\t//errorElementClass and errorMessage class but not those provided in options\r\n\t\t\toptions.errorElementClass = options.errorElementClass || options.errorClass || configuration.errorElementClass;\r\n\t\t\toptions.errorMessageClass = options.errorMessageClass || options.errorClass || configuration.errorMessageClass;\r\n\r\n\t\t\textend(configuration, options);\r\n\r\n\t\t\tif (configuration.registerExtenders) {\r\n\t\t\t\tkv.registerExtenders();\r\n\t\t\t}\r\n\r\n\t\t\tisInitialized = 1;\r\n\t\t},\r\n\r\n\t\t// resets the config back to its original state\r\n\t\treset: kv.configuration.reset,\r\n\r\n\t\t// recursively walks a viewModel and creates an object that\r\n\t\t// provides validation information for the entire viewModel\r\n\t\t// obj -> the viewModel to walk\r\n\t\t// options -> {\r\n\t\t//\t  deep: false, // if true, will walk past the first level of viewModel properties\r\n\t\t//\t  observable: false // if true, returns a computed observable indicating if the viewModel is valid\r\n\t\t// }\r\n\t\tgroup: function group(obj, options) { // array of observables or viewModel\r\n\t\t\toptions = extend(extend({}, configuration.grouping), options);\r\n\r\n\t\t\tvar context = {\r\n\t\t\t\toptions: options,\r\n\t\t\t\tgraphMonitor: ko.observable(),\r\n\t\t\t\tflagged: [],\r\n\t\t\t\tsubscriptions: [],\r\n\t\t\t\tvalidatables: []\r\n\t\t\t};\r\n\r\n\t\t\tvar result = null;\r\n\r\n\t\t\t//if using observables then traverse structure once and add observables\r\n\t\t\tif (options.observable) {\r\n\t\t\t\tresult = ko.computed(function () {\r\n\t\t\t\t\tcontext.graphMonitor(); //register dependency\r\n\t\t\t\t\trunTraversal(obj, context);\r\n\t\t\t\t\treturn collectErrors(context.validatables);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse { //if not using observables then every call to error() should traverse the structure\r\n\t\t\t\tresult = function () {\r\n\t\t\t\t\trunTraversal(obj, context);\r\n\t\t\t\t\treturn collectErrors(context.validatables);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tresult.showAllMessages = function (show) { // thanks @heliosPortal\r\n\t\t\t\tif (show === undefined) {//default to true\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult.forEach(function (observable) {\r\n\t\t\t\t\tif (utils.isValidatable(observable)) {\r\n\t\t\t\t\t\tobservable.isModified(show);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\r\n\t\t\tresult.isAnyMessageShown = function () {\r\n\t\t\t\tvar invalidAndModifiedPresent;\r\n\r\n\t\t\t\tinvalidAndModifiedPresent = !!result.find(function (observable) {\r\n\t\t\t\t\treturn utils.isValidatable(observable) && !observable.isValid() && observable.isModified();\r\n\t\t\t\t});\r\n\t\t\t\treturn invalidAndModifiedPresent;\r\n\t\t\t};\r\n\r\n\t\t\tresult.filter = function(predicate) {\r\n\t\t\t\tpredicate = predicate || function () { return true; };\r\n\t\t\t\t// ensure we have latest changes\r\n\t\t\t\tresult();\r\n\r\n\t\t\t\treturn koUtils.arrayFilter(context.validatables, predicate);\r\n\t\t\t};\r\n\r\n\t\t\tresult.find = function(predicate) {\r\n\t\t\t\tpredicate = predicate || function () { return true; };\r\n\t\t\t\t// ensure we have latest changes\r\n\t\t\t\tresult();\r\n\r\n\t\t\t\treturn koUtils.arrayFirst(context.validatables, predicate);\r\n\t\t\t};\r\n\r\n\t\t\tresult.forEach = function(callback) {\r\n\t\t\t\tcallback = callback || function () { };\r\n\t\t\t\t// ensure we have latest changes\r\n\t\t\t\tresult();\r\n\r\n\t\t\t\tforEach(context.validatables, callback);\r\n\t\t\t};\r\n\r\n\t\t\tresult.map = function(mapping) {\r\n\t\t\t\tmapping = mapping || function (item) { return item; };\r\n\t\t\t\t// ensure we have latest changes\r\n\t\t\t\tresult();\r\n\r\n\t\t\t\treturn koUtils.arrayMap(context.validatables, mapping);\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * @private You should not rely on this method being here.\r\n\t\t\t * It's a private method and it may change in the future.\r\n\t\t\t *\r\n\t\t\t * @description Updates the validated object and collects errors from it.\r\n\t\t\t */\r\n\t\t\tresult._updateState = function(newValue) {\r\n\t\t\t\tif (!utils.isObject(newValue)) {\r\n\t\t\t\t\tthrow new Error('An object is required.');\r\n\t\t\t\t}\r\n\t\t\t\tobj = newValue;\r\n\t\t\t\tif (options.observable) {\r\n\t\t\t\t\tcontext.graphMonitor.valueHasMutated();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trunTraversal(newValue, context);\r\n\t\t\t\t\treturn collectErrors(context.validatables);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\tformatMessage: function (message, params, observable) {\r\n\t\t\tif (utils.isObject(params) && params.typeAttr) {\r\n\t\t\t\tparams = params.value;\r\n\t\t\t}\r\n\t\t\tif (typeof message === 'function') {\r\n\t\t\t\treturn message(params, observable);\r\n\t\t\t}\r\n\t\t\tvar replacements = unwrap(params);\r\n\t\t\tif (replacements == null) {\r\n\t\t\t\treplacements = [];\r\n\t\t\t}\r\n\t\t\tif (!utils.isArray(replacements)) {\r\n\t\t\t\treplacements = [replacements];\r\n\t\t\t}\r\n\t\t\treturn message.replace(/{(\\d+)}/gi, function(match, index) {\r\n\t\t\t\tif (typeof replacements[index] !== 'undefined') {\r\n\t\t\t\t\treturn replacements[index];\r\n\t\t\t\t}\r\n\t\t\t\treturn match;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t// addRule:\r\n\t\t// This takes in a ko.observable and a Rule Context - which is just a rule name and params to supply to the validator\r\n\t\t// ie: kv.addRule(myObservable, {\r\n\t\t//\t\t  rule: 'required',\r\n\t\t//\t\t  params: true\r\n\t\t//\t  });\r\n\t\t//\r\n\t\taddRule: function (observable, rule) {\r\n\t\t\tobservable.extend({ validatable: true });\r\n\r\n\t\t\tvar hasRule = !!koUtils.arrayFirst(observable.rules(), function(item) {\r\n\t\t\t\treturn item.rule && item.rule === rule.rule;\r\n\t\t\t});\r\n\r\n\t\t\tif (!hasRule) {\r\n\t\t\t\t//push a Rule Context to the observables local array of Rule Contexts\r\n\t\t\t\tobservable.rules.push(rule);\r\n\t\t\t}\r\n\t\t\treturn observable;\r\n\t\t},\r\n\r\n\t\t// addAnonymousRule:\r\n\t\t// Anonymous Rules essentially have all the properties of a Rule, but are only specific for a certain property\r\n\t\t// and developers typically are wanting to add them on the fly or not register a rule with the 'kv.rules' object\r\n\t\t//\r\n\t\t// Example:\r\n\t\t// var test = ko.observable('something').extend{(\r\n\t\t//\t  validation: {\r\n\t\t//\t\t  validator: function(val, someOtherVal){\r\n\t\t//\t\t\t  return true;\r\n\t\t//\t\t  },\r\n\t\t//\t\t  message: \"Something must be really wrong!',\r\n\t\t//\t\t  params: true\r\n\t\t//\t  }\r\n\t\t//  )};\r\n\t\taddAnonymousRule: function (observable, ruleObj) {\r\n\t\t\tif (ruleObj['message'] === undefined) {\r\n\t\t\t\truleObj['message'] = 'Error';\r\n\t\t\t}\r\n\r\n\t\t\t//make sure onlyIf is honoured\r\n\t\t\tif (ruleObj.onlyIf) {\r\n\t\t\t\truleObj.condition = ruleObj.onlyIf;\r\n\t\t\t}\r\n\r\n\t\t\t//add the anonymous rule to the observable\r\n\t\t\tkv.addRule(observable, ruleObj);\r\n\t\t},\r\n\r\n\t\taddExtender: function (ruleName) {\r\n\t\t\tko.extenders[ruleName] = function (observable, params) {\r\n\t\t\t\t//params can come in a few flavors\r\n\t\t\t\t// 1. Just the params to be passed to the validator\r\n\t\t\t\t// 2. An object containing the Message to be used and the Params to pass to the validator\r\n\t\t\t\t// 3. A condition when the validation rule to be applied\r\n\t\t\t\t//\r\n\t\t\t\t// Example:\r\n\t\t\t\t// var test = ko.observable(3).extend({\r\n\t\t\t\t//\t  max: {\r\n\t\t\t\t//\t\t  message: 'This special field has a Max of {0}',\r\n\t\t\t\t//\t\t  params: 2,\r\n\t\t\t\t//\t\t  onlyIf: function() {\r\n\t\t\t\t//\t\t\treturn specialField.IsVisible();\r\n\t\t\t\t//\t\t  }\r\n\t\t\t\t//\t  }\r\n\t\t\t\t//  )};\r\n\t\t\t\t//\r\n\t\t\t\tif (params && (params.message || params.onlyIf)) { //if it has a message or condition object, then its an object literal to use\r\n\t\t\t\t\treturn kv.addRule(observable, {\r\n\t\t\t\t\t\trule: ruleName,\r\n\t\t\t\t\t\tmessage: params.message,\r\n\t\t\t\t\t\tparams: utils.isEmptyVal(params.params) ? true : params.params,\r\n\t\t\t\t\t\tcondition: params.onlyIf\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn kv.addRule(observable, {\r\n\t\t\t\t\t\trule: ruleName,\r\n\t\t\t\t\t\tparams: params\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t// loops through all kv.rules and adds them as extenders to\r\n\t\t// ko.extenders\r\n\t\tregisterExtenders: function () { // root extenders optional, use 'validation' extender if would cause conflicts\r\n\t\t\tif (configuration.registerExtenders) {\r\n\t\t\t\tfor (var ruleName in kv.rules) {\r\n\t\t\t\t\tif (kv.rules.hasOwnProperty(ruleName)) {\r\n\t\t\t\t\t\tif (!ko.extenders[ruleName]) {\r\n\t\t\t\t\t\t\tkv.addExtender(ruleName);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t//creates a span next to the @element with the specified error class\r\n\t\tinsertValidationMessage: function (element) {\r\n\t\t\tvar span = document.createElement('SPAN');\r\n\t\t\tspan.className = utils.getConfigOptions(element).errorMessageClass;\r\n\t\t\tutils.insertAfter(element, span);\r\n\t\t\treturn span;\r\n\t\t},\r\n\r\n\t\t// if html-5 validation attributes have been specified, this parses\r\n\t\t// the attributes on @element\r\n\t\tparseInputValidationAttributes: function (element, valueAccessor) {\r\n\t\t\tforEach(kv.configuration.html5Attributes, function (attr) {\r\n\t\t\t\tif (utils.hasAttribute(element, attr)) {\r\n\r\n\t\t\t\t\tvar params = element.getAttribute(attr) || true;\r\n\r\n\t\t\t\t\tif (attr === 'min' || attr === 'max')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If we're validating based on the min and max attributes, we'll\r\n\t\t\t\t\t\t// need to know what the 'type' attribute is set to\r\n\t\t\t\t\t\tvar typeAttr = element.getAttribute('type');\r\n\t\t\t\t\t\tif (typeof typeAttr === \"undefined\" || !typeAttr)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// From http://www.w3.org/TR/html-markup/input:\r\n\t\t\t\t\t\t\t//   An input element with no type attribute specified represents the\r\n\t\t\t\t\t\t\t//   same thing as an input element with its type attribute set to \"text\".\r\n\t\t\t\t\t\t\ttypeAttr = \"text\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tparams = {typeAttr: typeAttr, value: params};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkv.addRule(valueAccessor(), {\r\n\t\t\t\t\t\trule: attr,\r\n\t\t\t\t\t\tparams: params\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tvar currentType = element.getAttribute('type');\r\n\t\t\tforEach(kv.configuration.html5InputTypes, function (type) {\r\n\t\t\t\tif (type === currentType) {\r\n\t\t\t\t\tkv.addRule(valueAccessor(), {\r\n\t\t\t\t\t\trule: (type === 'date') ? 'dateISO' : type,\r\n\t\t\t\t\t\tparams: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t// writes html5 validation attributes on the element passed in\r\n\t\twriteInputValidationAttributes: function (element, valueAccessor) {\r\n\t\t\tvar observable = valueAccessor();\r\n\r\n\t\t\tif (!observable || !observable.rules) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar contexts = observable.rules(); // observable array\r\n\r\n\t\t\t// loop through the attributes and add the information needed\r\n\t\t\tforEach(kv.configuration.html5Attributes, function (attr) {\r\n\t\t\t\tvar ctx = koUtils.arrayFirst(contexts, function (ctx) {\r\n\t\t\t\t\treturn ctx.rule && ctx.rule.toLowerCase() === attr.toLowerCase();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!ctx) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// we have a rule matching a validation attribute at this point\r\n\t\t\t\t// so lets add it to the element along with the params\r\n\t\t\t\tko.computed({\r\n\t\t\t\t\tread: function() {\r\n\t\t\t\t\t\tvar params = ko.unwrap(ctx.params);\r\n\r\n\t\t\t\t\t\t// we have to do some special things for the pattern validation\r\n\t\t\t\t\t\tif (ctx.rule === \"pattern\" && params instanceof RegExp) {\r\n\t\t\t\t\t\t\t// we need the pure string representation of the RegExpr without the //gi stuff\r\n\t\t\t\t\t\t\tparams = params.source;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\telement.setAttribute(attr, params);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdisposeWhenNodeIsRemoved: element\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tcontexts = null;\r\n\t\t},\r\n\r\n\t\t//take an existing binding handler and make it cause automatic validations\r\n\t\tmakeBindingHandlerValidatable: function (handlerName) {\r\n\t\t\tvar init = ko.bindingHandlers[handlerName].init;\r\n\r\n\t\t\tko.bindingHandlers[handlerName].init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n\r\n\t\t\t\tinit(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n\r\n\t\t\t\treturn ko.bindingHandlers['validationCore'].init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t// visit an objects properties and apply validation rules from a definition\r\n\t\tsetRules: function (target, definition) {\r\n\t\t\tvar setRules = function (target, definition) {\r\n\t\t\t\tif (!target || !definition) { return; }\r\n\r\n\t\t\t\tfor (var prop in definition) {\r\n\t\t\t\t\tif (!definition.hasOwnProperty(prop)) { continue; }\r\n\t\t\t\t\tvar ruleDefinitions = definition[prop];\r\n\r\n\t\t\t\t\t//check the target property exists and has a value\r\n\t\t\t\t\tif (!target[prop]) { continue; }\r\n\t\t\t\t\tvar targetValue = target[prop],\r\n\t\t\t\t\t\tunwrappedTargetValue = unwrap(targetValue),\r\n\t\t\t\t\t\trules = {},\r\n\t\t\t\t\t\tnonRules = {};\r\n\r\n\t\t\t\t\tfor (var rule in ruleDefinitions) {\r\n\t\t\t\t\t\tif (!ruleDefinitions.hasOwnProperty(rule)) { continue; }\r\n\t\t\t\t\t\tif (kv.rules[rule]) {\r\n\t\t\t\t\t\t\trules[rule] = ruleDefinitions[rule];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnonRules[rule] = ruleDefinitions[rule];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//apply rules\r\n\t\t\t\t\tif (ko.isObservable(targetValue)) {\r\n\t\t\t\t\t\ttargetValue.extend(rules);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//then apply child rules\r\n\t\t\t\t\t//if it's an array, apply rules to all children\r\n\t\t\t\t\tif (unwrappedTargetValue && utils.isArray(unwrappedTargetValue)) {\r\n\t\t\t\t\t\tfor (var i = 0; i < unwrappedTargetValue.length; i++) {\r\n\t\t\t\t\t\t\tsetRules(unwrappedTargetValue[i], nonRules);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//otherwise, just apply to this property\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetRules(unwrappedTargetValue, nonRules);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsetRules(target, definition);\r\n\t\t}\r\n\t};\r\n\r\n}());\r\n\r\n// expose api publicly\r\nextend(ko.validation, api);\r\n;//Validation Rules:\r\n// You can view and override messages or rules via:\r\n// kv.rules[ruleName]\r\n//\r\n// To implement a custom Rule, simply use this template:\r\n// kv.rules['<custom rule name>'] = {\r\n//      validator: function (val, param) {\r\n//          <custom logic>\r\n//          return <true or false>;\r\n//      },\r\n//      message: '<custom validation message>' //optionally you can also use a '{0}' to denote a placeholder that will be replaced with your 'param'\r\n// };\r\n//\r\n// Example:\r\n// kv.rules['mustEqual'] = {\r\n//      validator: function( val, mustEqualVal ){\r\n//          return val === mustEqualVal;\r\n//      },\r\n//      message: 'This field must equal {0}'\r\n// };\r\n//\r\nkv.rules = {};\r\nkv.rules['required'] = {\r\n\tvalidator: function (val, required) {\r\n\t\tvar testVal;\r\n\r\n\t\tif (val === undefined || val === null) {\r\n\t\t\treturn !required;\r\n\t\t}\r\n\r\n\t\ttestVal = val;\r\n\t\tif (typeof (val) === 'string') {\r\n\t\t\tif (String.prototype.trim) {\r\n\t\t\t\ttestVal = val.trim();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttestVal = val.replace(/^\\s+|\\s+$/g, '');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!required) {// if they passed: { required: false }, then don't require this\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn ((testVal + '').length > 0);\r\n\t},\r\n\tmessage: 'This field is required.'\r\n};\r\n\r\nfunction minMaxValidatorFactory(validatorName) {\r\n\tvar isMaxValidation = validatorName === \"max\";\r\n\r\n\treturn function (val, options) {\r\n\t\tif (kv.utils.isEmptyVal(val)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tvar comparisonValue, type;\r\n\t\tif (options.typeAttr === undefined) {\r\n\t\t\t// This validator is being called from javascript rather than\r\n\t\t\t// being bound from markup\r\n\t\t\ttype = \"text\";\r\n\t\t\tcomparisonValue = options;\r\n\t\t} else {\r\n\t\t\ttype = options.typeAttr;\r\n\t\t\tcomparisonValue = options.value;\r\n\t\t}\r\n\r\n\t\t// From http://www.w3.org/TR/2012/WD-html5-20121025/common-input-element-attributes.html#attr-input-min,\r\n\t\t// if the value is parseable to a number, then the minimum should be numeric\r\n\t\tif (!isNaN(comparisonValue) && !(comparisonValue instanceof Date)) {\r\n\t\t\ttype = \"number\";\r\n\t\t}\r\n\r\n\t\tvar regex, valMatches, comparisonValueMatches;\r\n\t\tswitch (type.toLowerCase()) {\r\n\t\t\tcase \"week\":\r\n\t\t\t\tregex = /^(\\d{4})-W(\\d{2})$/;\r\n\t\t\t\tvalMatches = val.match(regex);\r\n\t\t\t\tif (valMatches === null) {\r\n\t\t\t\t\tthrow new Error(\"Invalid value for \" + validatorName + \" attribute for week input.  Should look like \" +\r\n\t\t\t\t\t\t\"'2000-W33' http://www.w3.org/TR/html-markup/input.week.html#input.week.attrs.min\");\r\n\t\t\t\t}\r\n\t\t\t\tcomparisonValueMatches = comparisonValue.match(regex);\r\n\t\t\t\t// If no regex matches were found, validation fails\r\n\t\t\t\tif (!comparisonValueMatches) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (isMaxValidation) {\r\n\t\t\t\t\treturn (valMatches[1] < comparisonValueMatches[1]) || // older year\r\n\t\t\t\t\t\t// same year, older week\r\n\t\t\t\t\t\t((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] <= comparisonValueMatches[2]));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (valMatches[1] > comparisonValueMatches[1]) || // newer year\r\n\t\t\t\t\t\t// same year, newer week\r\n\t\t\t\t\t\t((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] >= comparisonValueMatches[2]));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"month\":\r\n\t\t\t\tregex = /^(\\d{4})-(\\d{2})$/;\r\n\t\t\t\tvalMatches = val.match(regex);\r\n\t\t\t\tif (valMatches === null) {\r\n\t\t\t\t\tthrow new Error(\"Invalid value for \" + validatorName + \" attribute for month input.  Should look like \" +\r\n\t\t\t\t\t\t\"'2000-03' http://www.w3.org/TR/html-markup/input.month.html#input.month.attrs.min\");\r\n\t\t\t\t}\r\n\t\t\t\tcomparisonValueMatches = comparisonValue.match(regex);\r\n\t\t\t\t// If no regex matches were found, validation fails\r\n\t\t\t\tif (!comparisonValueMatches) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (isMaxValidation) {\r\n\t\t\t\t\treturn ((valMatches[1] < comparisonValueMatches[1]) || // older year\r\n\t\t\t\t\t\t// same year, older month\r\n\t\t\t\t\t\t((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] <= comparisonValueMatches[2])));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (valMatches[1] > comparisonValueMatches[1]) || // newer year\r\n\t\t\t\t\t\t// same year, newer month\r\n\t\t\t\t\t\t((valMatches[1] === comparisonValueMatches[1]) && (valMatches[2] >= comparisonValueMatches[2]));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"number\":\r\n\t\t\tcase \"range\":\r\n\t\t\t\tif (isMaxValidation) {\r\n\t\t\t\t\treturn (!isNaN(val) && parseFloat(val) <= parseFloat(comparisonValue));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (!isNaN(val) && parseFloat(val) >= parseFloat(comparisonValue));\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tif (isMaxValidation) {\r\n\t\t\t\t\treturn val <= comparisonValue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn val >= comparisonValue;\r\n\t\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nkv.rules['min'] = {\r\n\tvalidator: minMaxValidatorFactory(\"min\"),\r\n\tmessage: 'Please enter a value greater than or equal to {0}.'\r\n};\r\n\r\nkv.rules['max'] = {\r\n\tvalidator: minMaxValidatorFactory(\"max\"),\r\n\tmessage: 'Please enter a value less than or equal to {0}.'\r\n};\r\n\r\nkv.rules['minLength'] = {\r\n\tvalidator: function (val, minLength) {\r\n\t\tif(kv.utils.isEmptyVal(val)) { return true; }\r\n\t\tvar normalizedVal = kv.utils.isNumber(val) ? ('' + val) : val;\r\n\t\treturn normalizedVal.length >= minLength;\r\n\t},\r\n\tmessage: 'Please enter at least {0} characters.'\r\n};\r\n\r\nkv.rules['maxLength'] = {\r\n\tvalidator: function (val, maxLength) {\r\n\t\tif(kv.utils.isEmptyVal(val)) { return true; }\r\n\t\tvar normalizedVal = kv.utils.isNumber(val) ? ('' + val) : val;\r\n\t\treturn normalizedVal.length <= maxLength;\r\n\t},\r\n\tmessage: 'Please enter no more than {0} characters.'\r\n};\r\n\r\nkv.rules['pattern'] = {\r\n\tvalidator: function (val, regex) {\r\n\t\treturn kv.utils.isEmptyVal(val) || val.toString().match(regex) !== null;\r\n\t},\r\n\tmessage: 'Please check this value.'\r\n};\r\n\r\nkv.rules['step'] = {\r\n\tvalidator: function (val, step) {\r\n\r\n\t\t// in order to handle steps of .1 & .01 etc.. Modulus won't work\r\n\t\t// if the value is a decimal, so we have to correct for that\r\n\t\tif (kv.utils.isEmptyVal(val) || step === 'any') { return true; }\r\n\t\tvar dif = (val * 100) % (step * 100);\r\n\t\treturn Math.abs(dif) < 0.00001 || Math.abs(1 - dif) < 0.00001;\r\n\t},\r\n\tmessage: 'The value must increment by {0}.'\r\n};\r\n\r\nkv.rules['email'] = {\r\n\tvalidator: function (val, validate) {\r\n\t\tif (!validate) { return true; }\r\n\r\n\t\t//I think an empty email address is also a valid entry\r\n\t\t//if one want's to enforce entry it should be done with 'required: true'\r\n\t\treturn kv.utils.isEmptyVal(val) || (\r\n\t\t\t// jquery validate regex - thanks Scott Gonzalez\r\n\t\t\tvalidate && /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(val)\r\n\t\t);\r\n\t},\r\n\tmessage: 'Please enter a proper email address.'\r\n};\r\n\r\nkv.rules['date'] = {\r\n\tvalidator: function (value, validate) {\r\n\t\tif (!validate) { return true; }\r\n\t\treturn kv.utils.isEmptyVal(value) || (validate && !/Invalid|NaN/.test(new Date(value)));\r\n\t},\r\n\tmessage: 'Please enter a proper date.'\r\n};\r\n\r\nkv.rules['dateISO'] = {\r\n\tvalidator: function (value, validate) {\r\n\t\tif (!validate) { return true; }\r\n\t\treturn kv.utils.isEmptyVal(value) || (validate && /^\\d{4}[-/](?:0?[1-9]|1[012])[-/](?:0?[1-9]|[12][0-9]|3[01])$/.test(value));\r\n\t},\r\n\tmessage: 'Please enter a proper date.'\r\n};\r\n\r\nkv.rules['number'] = {\r\n\tvalidator: function (value, validate) {\r\n\t\tif (!validate) { return true; }\r\n\t\treturn kv.utils.isEmptyVal(value) || (validate && /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(value));\r\n\t},\r\n\tmessage: 'Please enter a number.'\r\n};\r\n\r\nkv.rules['digit'] = {\r\n\tvalidator: function (value, validate) {\r\n\t\tif (!validate) { return true; }\r\n\t\treturn kv.utils.isEmptyVal(value) || (validate && /^\\d+$/.test(value));\r\n\t},\r\n\tmessage: 'Please enter a digit.'\r\n};\r\n\r\nkv.rules['phoneUS'] = {\r\n\tvalidator: function (phoneNumber, validate) {\r\n\t\tif (!validate) { return true; }\r\n\t\tif (kv.utils.isEmptyVal(phoneNumber)) { return true; } // makes it optional, use 'required' rule if it should be required\r\n\t\tif (typeof (phoneNumber) !== 'string') { return false; }\r\n\t\tphoneNumber = phoneNumber.replace(/\\s+/g, \"\");\r\n\t\treturn validate && phoneNumber.length > 9 && phoneNumber.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n\t},\r\n\tmessage: 'Please specify a valid phone number.'\r\n};\r\n\r\nkv.rules['equal'] = {\r\n\tvalidator: function (val, params) {\r\n\t\tvar otherValue = params;\r\n\t\treturn val === kv.utils.getValue(otherValue);\r\n\t},\r\n\tmessage: 'Values must equal.'\r\n};\r\n\r\nkv.rules['notEqual'] = {\r\n\tvalidator: function (val, params) {\r\n\t\tvar otherValue = params;\r\n\t\treturn val !== kv.utils.getValue(otherValue);\r\n\t},\r\n\tmessage: 'Please choose another value.'\r\n};\r\n\r\n//unique in collection\r\n// options are:\r\n//    collection: array or function returning (observable) array\r\n//              in which the value has to be unique\r\n//    valueAccessor: function that returns value from an object stored in collection\r\n//              if it is null the value is compared directly\r\n//    external: set to true when object you are validating is automatically updating collection\r\nkv.rules['unique'] = {\r\n\tvalidator: function (val, options) {\r\n\t\tvar c = kv.utils.getValue(options.collection),\r\n\t\t\texternal = kv.utils.getValue(options.externalValue),\r\n\t\t\tcounter = 0;\r\n\r\n\t\tif (!val || !c) { return true; }\r\n\r\n\t\tkoUtils.arrayFilter(c, function (item) {\r\n\t\t\tif (val === (options.valueAccessor ? options.valueAccessor(item) : item)) { counter++; }\r\n\t\t});\r\n\t\t// if value is external even 1 same value in collection means the value is not unique\r\n\t\treturn counter < (!!external ? 1 : 2);\r\n\t},\r\n\tmessage: 'Please make sure the value is unique.'\r\n};\r\n\r\n\r\n//now register all of these!\r\n(function () {\r\n\tkv.registerExtenders();\r\n}());\r\n;// The core binding handler\r\n// this allows us to setup any value binding that internally always\r\n// performs the same functionality\r\nko.bindingHandlers['validationCore'] = (function () {\r\n\r\n\treturn {\r\n\t\tinit: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n\t\t\tvar config = kv.utils.getConfigOptions(element);\r\n\t\t\tvar observable = valueAccessor();\r\n\r\n\t\t\t// parse html5 input validation attributes, optional feature\r\n\t\t\tif (config.parseInputAttributes) {\r\n\t\t\t\tkv.utils.async(function () { kv.parseInputValidationAttributes(element, valueAccessor); });\r\n\t\t\t}\r\n\r\n\t\t\t// if requested insert message element and apply bindings\r\n\t\t\tif (config.insertMessages && kv.utils.isValidatable(observable)) {\r\n\r\n\t\t\t\t// insert the <span></span>\r\n\t\t\t\tvar validationMessageElement = kv.insertValidationMessage(element);\r\n\r\n\t\t\t\t// if we're told to use a template, make sure that gets rendered\r\n\t\t\t\tif (config.messageTemplate) {\r\n\t\t\t\t\tko.renderTemplate(config.messageTemplate, { field: observable }, null, validationMessageElement, 'replaceNode');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tko.applyBindingsToNode(validationMessageElement, { validationMessage: observable });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// write the html5 attributes if indicated by the config\r\n\t\t\tif (config.writeInputAttributes && kv.utils.isValidatable(observable)) {\r\n\r\n\t\t\t\tkv.writeInputValidationAttributes(element, valueAccessor);\r\n\t\t\t}\r\n\r\n\t\t\t// if requested, add binding to decorate element\r\n\t\t\tif (config.decorateInputElement && kv.utils.isValidatable(observable)) {\r\n\t\t\t\tko.applyBindingsToNode(element, { validationElement: observable });\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n}());\r\n\r\n// override for KO's default 'value', 'checked', 'textInput' and selectedOptions bindings\r\nkv.makeBindingHandlerValidatable(\"value\");\r\nkv.makeBindingHandlerValidatable(\"checked\");\r\nif (ko.bindingHandlers.textInput) {\r\n\tkv.makeBindingHandlerValidatable(\"textInput\");\r\n}\r\nkv.makeBindingHandlerValidatable(\"selectedOptions\");\r\n\r\n\r\nko.bindingHandlers['validationMessage'] = { // individual error message, if modified or post binding\r\n\tupdate: function (element, valueAccessor) {\r\n\t\tvar obsv = valueAccessor(),\r\n\t\t\tconfig = kv.utils.getConfigOptions(element),\r\n\t\t\tval = unwrap(obsv),\r\n\t\t\tmsg = null,\r\n\t\t\tisModified = false,\r\n\t\t\tisValid = false;\r\n\r\n\t\tif (obsv === null || typeof obsv === 'undefined') {\r\n\t\t\tthrow new Error('Cannot bind validationMessage to undefined value. data-bind expression: ' +\r\n\t\t\t\telement.getAttribute('data-bind'));\r\n\t\t}\r\n\r\n\t\tisModified = obsv.isModified && obsv.isModified();\r\n\t\tisValid = obsv.isValid && obsv.isValid();\r\n\r\n\t\tvar error = null;\r\n\t\tif (!config.messagesOnModified || isModified) {\r\n\t\t\terror = isValid ? null : obsv.error;\r\n\t\t}\r\n\r\n\t\tvar isVisible = !config.messagesOnModified || isModified ? !isValid : false;\r\n\t\tvar isCurrentlyVisible = element.style.display !== \"none\";\r\n\r\n\t\tif (config.allowHtmlMessages) {\r\n\t\t\tkoUtils.setHtml(element, error);\r\n\t\t} else {\r\n\t\t\tko.bindingHandlers.text.update(element, function () { return error; });\r\n\t\t}\r\n\r\n\t\tif (isCurrentlyVisible && !isVisible) {\r\n\t\t\telement.style.display = 'none';\r\n\t\t} else if (!isCurrentlyVisible && isVisible) {\r\n\t\t\telement.style.display = '';\r\n\t\t}\r\n\t}\r\n};\r\n\r\nko.bindingHandlers['validationElement'] = {\r\n\tupdate: function (element, valueAccessor, allBindingsAccessor) {\r\n\t\tvar obsv = valueAccessor(),\r\n\t\t\tconfig = kv.utils.getConfigOptions(element),\r\n\t\t\tval = unwrap(obsv),\r\n\t\t\tmsg = null,\r\n\t\t\tisModified = false,\r\n\t\t\tisValid = false;\r\n\r\n\t\tif (obsv === null || typeof obsv === 'undefined') {\r\n\t\t\tthrow new Error('Cannot bind validationElement to undefined value. data-bind expression: ' +\r\n\t\t\t\telement.getAttribute('data-bind'));\r\n\t\t}\r\n\r\n\t\tisModified = obsv.isModified && obsv.isModified();\r\n\t\tisValid = obsv.isValid && obsv.isValid();\r\n\r\n\t\t// create an evaluator function that will return something like:\r\n\t\t// css: { validationElement: true }\r\n\t\tvar cssSettingsAccessor = function () {\r\n\t\t\tvar css = {};\r\n\r\n\t\t\tvar shouldShow = ((!config.decorateElementOnModified || isModified) ? !isValid : false);\r\n\r\n\t\t\t// css: { validationElement: false }\r\n\t\t\tcss[config.errorElementClass] = shouldShow;\r\n\r\n\t\t\treturn css;\r\n\t\t};\r\n\r\n\t\t//add or remove class on the element;\r\n\t\tko.bindingHandlers.css.update(element, cssSettingsAccessor, allBindingsAccessor);\r\n\t\tif (!config.errorsAsTitle) { return; }\r\n\r\n\t\tko.bindingHandlers.attr.update(element, function () {\r\n\t\t\tvar\r\n\t\t\t\thasModification = !config.errorsAsTitleOnModified || isModified,\r\n\t\t\t\ttitle = kv.utils.getOriginalElementTitle(element);\r\n\r\n\t\t\tif (hasModification && !isValid) {\r\n\t\t\t\treturn { title: obsv.error, 'data-orig-title': title };\r\n\t\t\t} else if (!hasModification || isValid) {\r\n\t\t\t\treturn { title: title, 'data-orig-title': null };\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// ValidationOptions:\r\n// This binding handler allows you to override the initial config by setting any of the options for a specific element or context of elements\r\n//\r\n// Example:\r\n// <div data-bind=\"validationOptions: { insertMessages: true, messageTemplate: 'customTemplate', errorMessageClass: 'mySpecialClass'}\">\r\n//      <input type=\"text\" data-bind=\"value: someValue\"/>\r\n//      <input type=\"text\" data-bind=\"value: someValue2\"/>\r\n// </div>\r\nko.bindingHandlers['validationOptions'] = (function () {\r\n\treturn {\r\n\t\tinit: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n\t\t\tvar options = unwrap(valueAccessor());\r\n\t\t\tif (options) {\r\n\t\t\t\tvar newConfig = extend({}, kv.configuration);\r\n\t\t\t\textend(newConfig, options);\r\n\r\n\t\t\t\t//store the validation options on the node so we can retrieve it later\r\n\t\t\t\tkv.utils.setDomData(element, newConfig);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}());\r\n;// Validation Extender:\r\n// This is for creating custom validation logic on the fly\r\n// Example:\r\n// var test = ko.observable('something').extend{(\r\n//      validation: {\r\n//          validator: function(val, someOtherVal){\r\n//              return true;\r\n//          },\r\n//          message: \"Something must be really wrong!',\r\n//          params: true\r\n//      }\r\n//  )};\r\nko.extenders['validation'] = function (observable, rules) { // allow single rule or array\r\n\tforEach(kv.utils.isArray(rules) ? rules : [rules], function (rule) {\r\n\t\t// the 'rule' being passed in here has no name to identify a core Rule,\r\n\t\t// so we add it as an anonymous rule\r\n\t\t// If the developer is wanting to use a core Rule, but use a different message see the 'addExtender' logic for examples\r\n\t\tkv.addAnonymousRule(observable, rule);\r\n\t});\r\n\treturn observable;\r\n};\r\n\r\n//This is the extender that makes a Knockout Observable also 'Validatable'\r\n//examples include:\r\n// 1. var test = ko.observable('something').extend({validatable: true});\r\n// this will ensure that the Observable object is setup properly to respond to rules\r\n//\r\n// 2. test.extend({validatable: false});\r\n// this will remove the validation properties from the Observable object should you need to do that.\r\nko.extenders['validatable'] = function (observable, options) {\r\n\tif (!kv.utils.isObject(options)) {\r\n\t\toptions = { enable: options };\r\n\t}\r\n\r\n\tif (!('enable' in options)) {\r\n\t\toptions.enable = true;\r\n\t}\r\n\r\n\tif (options.enable && !kv.utils.isValidatable(observable)) {\r\n\t\tvar config = kv.configuration.validate || {};\r\n\t\tvar validationOptions = {\r\n\t\t\tthrottleEvaluation : options.throttle || config.throttle\r\n\t\t};\r\n\r\n\t\tobservable.error = ko.observable(null); // holds the error message, we only need one since we stop processing validators when one is invalid\r\n\r\n\t\t// observable.rules:\r\n\t\t// ObservableArray of Rule Contexts, where a Rule Context is simply the name of a rule and the params to supply to it\r\n\t\t//\r\n\t\t// Rule Context = { rule: '<rule name>', params: '<passed in params>', message: '<Override of default Message>' }\r\n\t\tobservable.rules = ko.observableArray(); //holds the rule Contexts to use as part of validation\r\n\r\n\t\t//in case async validation is occurring\r\n\t\tobservable.isValidating = ko.observable(false);\r\n\r\n\t\t//the true holder of whether the observable is valid or not\r\n\t\tobservable.__valid__ = ko.observable(true);\r\n\r\n\t\tobservable.isModified = ko.observable(false);\r\n\r\n\t\t// a semi-protected observable\r\n\t\tobservable.isValid = ko.computed(observable.__valid__);\r\n\r\n\t\t//manually set error state\r\n\t\tobservable.setError = function (error) {\r\n\t\t\tvar previousError = observable.error.peek();\r\n\t\t\tvar previousIsValid = observable.__valid__.peek();\r\n\r\n\t\t\tobservable.error(error);\r\n\t\t\tobservable.__valid__(false);\r\n\r\n\t\t\tif (previousError !== error && !previousIsValid) {\r\n\t\t\t\t// if the observable was not valid before then isValid will not mutate,\r\n\t\t\t\t// hence causing any grouping to not display the latest error.\r\n\t\t\t\tobservable.isValid.notifySubscribers();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//manually clear error state\r\n\t\tobservable.clearError = function () {\r\n\t\t\tobservable.error(null);\r\n\t\t\tobservable.__valid__(true);\r\n\t\t\treturn observable;\r\n\t\t};\r\n\r\n\t\t//subscribe to changes in the observable\r\n\t\tvar h_change = observable.subscribe(function () {\r\n\t\t\tobservable.isModified(true);\r\n\t\t});\r\n\r\n\t\t// we use a computed here to ensure that anytime a dependency changes, the\r\n\t\t// validation logic evaluates\r\n\t\tvar h_obsValidationTrigger = ko.computed(extend({\r\n\t\t\tread: function () {\r\n\t\t\t\tvar obs = observable(),\r\n\t\t\t\t\truleContexts = observable.rules();\r\n\r\n\t\t\t\tkv.validateObservable(observable);\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}, validationOptions));\r\n\r\n\t\textend(h_obsValidationTrigger, validationOptions);\r\n\r\n\t\tobservable._disposeValidation = function () {\r\n\t\t\t//first dispose of the subscriptions\r\n\t\t\tobservable.isValid.dispose();\r\n\t\t\tobservable.rules.removeAll();\r\n\t\t\th_change.dispose();\r\n\t\t\th_obsValidationTrigger.dispose();\r\n\r\n\t\t\tdelete observable['rules'];\r\n\t\t\tdelete observable['error'];\r\n\t\t\tdelete observable['isValid'];\r\n\t\t\tdelete observable['isValidating'];\r\n\t\t\tdelete observable['__valid__'];\r\n\t\t\tdelete observable['isModified'];\r\n            delete observable['setError'];\r\n            delete observable['clearError'];\r\n            delete observable['_disposeValidation'];\r\n\t\t};\r\n\t} else if (options.enable === false && observable._disposeValidation) {\r\n\t\tobservable._disposeValidation();\r\n\t}\r\n\treturn observable;\r\n};\r\n\r\nfunction validateSync(observable, rule, ctx) {\r\n\t//Execute the validator and see if its valid\r\n\tif (!rule.validator(observable(), (ctx.params === undefined ? true : unwrap(ctx.params)))) { // default param is true, eg. required = true\r\n\r\n\t\t//not valid, so format the error message and stick it in the 'error' variable\r\n\t\tobservable.setError(kv.formatMessage(\r\n\t\t\t\t\tctx.message || rule.message,\r\n\t\t\t\t\tunwrap(ctx.params),\r\n\t\t\t\t\tobservable));\r\n\t\treturn false;\r\n\t} else {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nfunction validateAsync(observable, rule, ctx) {\r\n\tobservable.isValidating(true);\r\n\r\n\tvar callBack = function (valObj) {\r\n\t\tvar isValid = false,\r\n\t\t\tmsg = '';\r\n\r\n\t\tif (!observable.__valid__()) {\r\n\r\n\t\t\t// since we're returning early, make sure we turn this off\r\n\t\t\tobservable.isValidating(false);\r\n\r\n\t\t\treturn; //if its already NOT valid, don't add to that\r\n\t\t}\r\n\r\n\t\t//we were handed back a complex object\r\n\t\tif (valObj['message']) {\r\n\t\t\tisValid = valObj.isValid;\r\n\t\t\tmsg = valObj.message;\r\n\t\t} else {\r\n\t\t\tisValid = valObj;\r\n\t\t}\r\n\r\n\t\tif (!isValid) {\r\n\t\t\t//not valid, so format the error message and stick it in the 'error' variable\r\n\t\t\tobservable.error(kv.formatMessage(\r\n\t\t\t\tmsg || ctx.message || rule.message,\r\n\t\t\t\tunwrap(ctx.params),\r\n\t\t\t\tobservable));\r\n\t\t\tobservable.__valid__(isValid);\r\n\t\t}\r\n\r\n\t\t// tell it that we're done\r\n\t\tobservable.isValidating(false);\r\n\t};\r\n\r\n\tkv.utils.async(function() {\r\n\t    //fire the validator and hand it the callback\r\n        rule.validator(observable(), ctx.params === undefined ? true : unwrap(ctx.params), callBack);\r\n\t});\r\n}\r\n\r\nkv.validateObservable = function (observable) {\r\n\tvar i = 0,\r\n\t\trule, // the rule validator to execute\r\n\t\tctx, // the current Rule Context for the loop\r\n\t\truleContexts = observable.rules(), //cache for iterator\r\n\t\tlen = ruleContexts.length; //cache for iterator\r\n\r\n\tfor (; i < len; i++) {\r\n\r\n\t\t//get the Rule Context info to give to the core Rule\r\n\t\tctx = ruleContexts[i];\r\n\r\n\t\t// checks an 'onlyIf' condition\r\n\t\tif (ctx.condition && !ctx.condition()) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\t//get the core Rule to use for validation\r\n\t\trule = ctx.rule ? kv.rules[ctx.rule] : ctx;\r\n\r\n\t\tif (rule['async'] || ctx['async']) {\r\n\t\t\t//run async validation\r\n\t\t\tvalidateAsync(observable, rule, ctx);\r\n\r\n\t\t} else {\r\n\t\t\t//run normal sync validation\r\n\t\t\tif (!validateSync(observable, rule, ctx)) {\r\n\t\t\t\treturn false; //break out of the loop\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//finally if we got this far, make the observable valid again!\r\n\tobservable.clearError();\r\n\treturn true;\r\n};\r\n;\r\nvar _locales = {};\r\nvar _currentLocale;\r\n\r\nkv.defineLocale = function(name, values) {\r\n\tif (name && values) {\r\n\t\t_locales[name.toLowerCase()] = values;\r\n\t\treturn values;\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nkv.locale = function(name) {\r\n\tif (name) {\r\n\t\tname = name.toLowerCase();\r\n\r\n\t\tif (_locales.hasOwnProperty(name)) {\r\n\t\t\tkv.localize(_locales[name]);\r\n\t\t\t_currentLocale = name;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error('Localization ' + name + ' has not been loaded.');\r\n\t\t}\r\n\t}\r\n\treturn _currentLocale;\r\n};\r\n\r\n//quick function to override rule messages\r\nkv.localize = function (msgTranslations) {\r\n\tvar rules = kv.rules;\r\n\r\n\t//loop the properties in the object and assign the msg to the rule\r\n\tfor (var ruleName in msgTranslations) {\r\n\t\tif (rules.hasOwnProperty(ruleName)) {\r\n\t\t\trules[ruleName].message = msgTranslations[ruleName];\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Populate default locale (this will make en-US.js somewhat redundant)\r\n(function() {\r\n\tvar localeData = {};\r\n\tvar rules = kv.rules;\r\n\r\n\tfor (var ruleName in rules) {\r\n\t\tif (rules.hasOwnProperty(ruleName)) {\r\n\t\t\tlocaleData[ruleName] = rules[ruleName].message;\r\n\t\t}\r\n\t}\r\n\tkv.defineLocale('en-us', localeData);\r\n})();\r\n\r\n// No need to invoke locale because the messages are already defined along with the rules for en-US\r\n_currentLocale = 'en-us';\r\n;/**\r\n * Possible invocations:\r\n * \t\tapplyBindingsWithValidation(viewModel)\r\n * \t\tapplyBindingsWithValidation(viewModel, options)\r\n * \t\tapplyBindingsWithValidation(viewModel, rootNode)\r\n *\t\tapplyBindingsWithValidation(viewModel, rootNode, options)\r\n */\r\nko.applyBindingsWithValidation = function (viewModel, rootNode, options) {\r\n\tvar node = document.body,\r\n\t\tconfig;\r\n\r\n\tif (rootNode && rootNode.nodeType) {\r\n\t\tnode = rootNode;\r\n\t\tconfig = options;\r\n\t}\r\n\telse {\r\n\t\tconfig = rootNode;\r\n\t}\r\n\r\n\tkv.init();\r\n\r\n\tif (config) {\r\n\t\tconfig = extend(extend({}, kv.configuration), config);\r\n\t\tkv.utils.setDomData(node, config);\r\n\t}\r\n\r\n\tko.applyBindings(viewModel, node);\r\n};\r\n\r\n//override the original applyBindings so that we can ensure all new rules and what not are correctly registered\r\nvar origApplyBindings = ko.applyBindings;\r\nko.applyBindings = function () {\r\n\tkv.init();\r\n\torigApplyBindings.apply(this, arguments);\r\n};\r\n\r\nko.validatedObservable = function (initialValue, options) {\r\n\tif (!options && !kv.utils.isObject(initialValue)) {\r\n\t\treturn ko.observable(initialValue).extend({ validatable: true });\r\n\t}\r\n\r\n\tvar obsv = ko.observable(initialValue);\r\n\tobsv.errors = kv.group(kv.utils.isObject(initialValue) ? initialValue : {}, options);\r\n\tobsv.isValid = ko.observable(obsv.errors().length === 0);\r\n\r\n\tif (ko.isObservable(obsv.errors)) {\r\n\t\tobsv.errors.subscribe(function(errors) {\r\n\t\t\tobsv.isValid(errors.length === 0);\r\n\t\t});\r\n\t}\r\n\telse {\r\n\t\tko.computed(obsv.errors).subscribe(function (errors) {\r\n\t\t\tobsv.isValid(errors.length === 0);\r\n\t\t});\r\n\t}\r\n\r\n\tobsv.subscribe(function(newValue) {\r\n\t\tif (!kv.utils.isObject(newValue)) {\r\n\t\t\t/*\r\n\t\t\t * The validation group works on objects.\r\n\t\t\t * Since the new value is a primitive (scalar, null or undefined) we need\r\n\t\t\t * to create an empty object to pass along.\r\n\t\t\t */\r\n\t\t\tnewValue = {};\r\n\t\t}\r\n\t\t// Force the group to refresh\r\n\t\tobsv.errors._updateState(newValue);\r\n\t\tobsv.isValid(obsv.errors().length === 0);\r\n\t});\r\n\r\n\treturn obsv;\r\n};\r\n;}));","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n"],"sourceRoot":"/WFSpa3/"}