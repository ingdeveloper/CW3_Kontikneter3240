"use strict";
var fs = require("fs");
var version = require("../actions/extract-app-version")();
var gulp = require("gulp");
var FtpDeploy = require("ftp-deploy");
var open = require("gulp-open");
var gutil = require("gulp-util");
var Promise = require("bluebird");
var lib = require("ftp-deploy/src/lib");
var gulpSequence = require("gulp-sequence");

var ftpDeploy = new FtpDeploy();

var config = {
  user: "Wf_Deploy-User",
  password: "acg8CZTWoYBWM",
  host: "wf-ersatz-w2k-3",
  port: 21,
  localRoot: `releases/${version}/app`,
  remoteRoot: "test1",
  include: ["*.*", "**/*"],
  exclude: [".git", ".idea", "tmp/*", "node_modules/*"],
  deleteRemote: false,
  forcePasv: true,
  sftp: false,
  remaining: 5,
};

let name = "";
const updateCallback = (data) => {
  if (!name.includes(data.filename)) {
    gutil.log(
      "> " +
        gutil.colors.green(
          ((data.transferredFileCount * 100) / data.totalFilesCount).toFixed(
            2
          ) + "%"
        ),
      data.filename
    );
  }
  name = data.filename;
};
const errorCallback = (data) => {
  "> " + gutil.colors.red(data.err);
};
const log = (data) => {
  gutil.log("> " + gutil.colors.blue(data));
};
ftpDeploy.on("uploading", updateCallback);
ftpDeploy.on("uploaded", updateCallback);
ftpDeploy.on("upload-error", errorCallback);
ftpDeploy.on("log", log);

const rename = async (list, oldName) => {
  oldName = oldName.replace(/\//g, "");
  gutil.log("> " + "suche Ordner: " + "'" + oldName + "'");
  for (var key in list) {
    if (list.hasOwnProperty(key)) {
      var element = list[key];
      if (element.name == oldName && element.type == "d") {
        var newName =
          oldName +
          "_" +
          (
            element.date.toISOString().slice(0, 10) +
            element.date.toLocaleTimeString()
          ).replace(/[\s-:]/gm, "");
        await ftpDeploy.ftp.rename(oldName, newName);
        gutil.log("> " + "Ordner gefunden - umbenannt in '" + newName + "'");
        return await Promise.resolve();
      }
    }
  }
  gutil.log("> " + "Ordner '" + oldName + "' nicht gefunden");
  return Promise.resolve();
};

const delOldOrders = (list, filterName, quantity) => {
  return list
    .filter((f) => f.name.includes(filterName.replace(/\//g, "") + "_"))
    .sort((a, b) => b.date - a.date)
    .slice(quantity - 1 || 1)
    .map((d) => d.name);
};

const countFiles = (files) =>
  files.map((f) => f.length).reduce((a, b) => a + b);

const deploy = async () => {
  try {
    // Überprüfen, ob der Quellordner existiert
    if (!fs.existsSync(config.localRoot)) {
      throw new Error(
        `Quellordner ${config.localRoot} existiert nicht. 'publish-app' vergessen durchzuführen?'`
      );
    } else {
      gutil.log("> " + "Quellordner '" + config.localRoot + "' gefunden.");
    }

    await ftpDeploy.connect(config);

    // Überprüfen, ob der Zielordner existiert, und ggf. anlegen
    const list = await ftpDeploy.ftp.list("/");
    const remoteRootExists = list.some(
      (item) => item.name === config.remoteRoot && item.type === "d"
    );
    if (!remoteRootExists) {
      await ftpDeploy.ftp.mkdir(config.remoteRoot, true);
      gutil.log("> " + "Zielordner '" + config.remoteRoot + "' angelegt.");
    }

    await rename(list, config.remoteRoot);
    const orderNames = delOldOrders(list, config.remoteRoot, config.remaining);
    for (let index = 0; index < orderNames.length; index++) {
      await ftpDeploy.ftp.rmdir(orderNames[index], true);
      gutil.log("> " + "'" + orderNames[index] + "'" + " gelöscht!");
    }
    await lib.checkIncludes(config);
    await lib.getPassword(config);
    ftpDeploy.deleteRemote(config);
    const resp = await ftpDeploy.checkLocalAndUpload(config);
    ftpDeploy.ftp.end();
    gutil.log(
      "> " + gutil.colors.yellow("Uploaded: ", countFiles(resp), " files!")
    );
  } catch (err) {
    // gutil.log(err);
    throw err;
  }
};

gulp.task("deploy", function (done) {
  deploy()
    .then(() => done())
    .catch((err) => gutil.log(gutil.colors.red(err)));
});

gulp.task("open", function (done) {
  gulp.src(__filename).pipe(
    open({
      uri: "http://" + config.host + "/" + config.remoteRoot,
      app: "msedge",
    })
  );
  done();
});

gulp.task("ftp", gulpSequence("deploy", "open"));
